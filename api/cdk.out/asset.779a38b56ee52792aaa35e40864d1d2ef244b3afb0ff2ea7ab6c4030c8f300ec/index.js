"use strict";var N=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var R=Object.getOwnPropertyNames;var C=Object.prototype.hasOwnProperty;var D=(e,s)=>{for(var r in s)N(e,r,{get:s[r],enumerable:!0})},G=(e,s,r,d)=>{if(s&&typeof s=="object"||typeof s=="function")for(let i of R(s))!C.call(e,i)&&i!==r&&N(e,i,{get:()=>s[i],enumerable:!(d=h(s,i))||d.enumerable});return e};var O=e=>G(N({},"__esModule",{value:!0}),e);var V={};D(V,{handler:()=>M});module.exports=O(V);var T=require("@aws-sdk/client-dynamodb"),m=require("@aws-sdk/lib-dynamodb"),U=new T.DynamoDBClient({}),p=m.DynamoDBDocumentClient.from(U),E=process.env.TABLE_NAME,W=process.env.STATUS_TIME_INDEX,c={"Content-Type":"application/json","Access-Control-Allow-Origin":"*","Access-Control-Allow-Methods":"GET, POST, OPTIONS","Access-Control-Allow-Headers":"Content-Type,Authorization"},M=async e=>{if(console.log("Event received:",JSON.stringify(e,null,2)),e.httpMethod==="OPTIONS")return{statusCode:200,headers:c,body:JSON.stringify({message:"CORS enabled"})};try{let s=e.path.toLowerCase();if(s.includes("/leaderboard"))return await q(e);if(s.includes("/stats/")){let r=e.pathParameters?.userId;return r?await K(r):{statusCode:400,headers:c,body:JSON.stringify({message:"User ID is required"})}}if(s.includes("/games")){if(e.httpMethod==="GET")return await J(e);if(e.httpMethod==="POST")return await _(e)}return{statusCode:404,headers:c,body:JSON.stringify({message:"Endpoint not found"})}}catch(s){return console.error("Error:",s),{statusCode:500,headers:c,body:JSON.stringify({message:"Internal server error",error:s instanceof Error?s.message:String(s)})}}};async function _(e){if(!e.body)return{statusCode:400,headers:c,body:JSON.stringify({message:"Request body is required"})};let s=JSON.parse(e.body);console.log("Request body:",s);let{userId:r,status:d,time:i,successTime:A,winTime:g,userName:t,userImage:a}=s;if(!r||!d)return{statusCode:400,headers:c,body:JSON.stringify({message:"userId and status are required"})};let l=new Date().toISOString(),o=Number(i||A||g||0),u=Math.floor(Date.now()/1e3)+90*24*60*60,y=`USER#${r}`,P=`DATE#${l}`,f={userId:y,timestamp:P,rawUserId:r,status:d,time:o,date:l,ttl:u,userName:t||r,userImage:a||null};if(console.log("Storing game item:",f),await p.send(new m.PutCommand({TableName:E,Item:f})),d==="success"&&o>0){let b=`USER#${r}`;try{let I=await p.send(new m.QueryCommand({TableName:E,KeyConditionExpression:"userId = :userId AND timestamp = :timestamp",ExpressionAttributeValues:{":userId":y,":timestamp":b}})),w=I.Items&&I.Items.length>0?I.Items[0]:null;if(!w||o<w.time){console.log(`Updating best time for ${r}: ${o} seconds`);let S={userId:y,timestamp:b,rawUserId:r,status:"best",time:o,date:l,ttl:Math.floor(Date.now()/1e3)+365*24*60*60,userName:t||r,userImage:a||null};await p.send(new m.PutCommand({TableName:E,Item:S})),console.log("Best time updated successfully")}}catch(I){console.error("Error checking/updating best time:",I)}}return console.log("Game result stored successfully"),{statusCode:200,headers:c,body:JSON.stringify({message:"Game result stored successfully",item:f})}}async function J(e){let s=e.queryStringParameters?.userId,r=e.queryStringParameters?.status,d=e.queryStringParameters?.limit?parseInt(e.queryStringParameters.limit):100;if(s){let t=`USER#${s}`,a={TableName:E,KeyConditionExpression:"userId = :userId",ExpressionAttributeValues:{":userId":t},ScanIndexForward:!1,Limit:d};r?(a.FilterExpression="status = :status AND begins_with(timestamp, :datePrefix)",a.ExpressionAttributeValues[":status"]=r,a.ExpressionAttributeValues[":datePrefix"]="DATE#"):(a.FilterExpression="begins_with(timestamp, :datePrefix)",a.ExpressionAttributeValues[":datePrefix"]="DATE#");let o=((await p.send(new m.QueryCommand(a))).Items||[]).map(u=>({...u,userId:u.rawUserId||(u.userId.startsWith("USER#")?u.userId.substring(5):u.userId),displayTimestamp:u.timestamp.startsWith("DATE#")?u.timestamp.substring(5):u.timestamp}));return{statusCode:200,headers:c,body:JSON.stringify(o)}}let i={TableName:E,FilterExpression:"begins_with(timestamp, :datePrefix)",ExpressionAttributeValues:{":datePrefix":"DATE#"},Limit:d};r&&(i.FilterExpression+=" AND status = :status",i.ExpressionAttributeValues[":status"]=r);let g=((await p.send(new m.ScanCommand(i))).Items||[]).map(t=>({...t,userId:t.rawUserId||(t.userId.startsWith("USER#")?t.userId.substring(5):t.userId),displayTimestamp:t.timestamp.startsWith("DATE#")?t.timestamp.substring(5):t.timestamp}));return{statusCode:200,headers:c,body:JSON.stringify(g)}}async function q(e){let s=e.queryStringParameters?.limit?parseInt(e.queryStringParameters.limit):10,r={TableName:E,FilterExpression:"begins_with(timestamp, :userPrefix) AND status = :status",ExpressionAttributeValues:{":userPrefix":"USER#",":status":"best"}},g=((await p.send(new m.ScanCommand(r))).Items||[]).sort((t,a)=>t.time-a.time).slice(0,s).map((t,a)=>{let l=t.rawUserId||(t.userId.startsWith("USER#")?t.userId.substring(5):t.userId);return{rank:a+1,userId:l,userName:t.userName||l,userImage:t.userImage||null,time:t.time,date:t.date}});return{statusCode:200,headers:c,body:JSON.stringify(g)}}async function K(e){let s=`USER#${e}`,r={TableName:E,KeyConditionExpression:"userId = :userId",ExpressionAttributeValues:{":userId":s}},i=(await p.send(new m.QueryCommand(r))).Items||[],A=`USER#${e}`,g={TableName:E,KeyConditionExpression:"userId = :userId AND timestamp = :timestamp",ExpressionAttributeValues:{":userId":s,":timestamp":A}},t=await p.send(new m.QueryCommand(g)),a=t.Items&&t.Items.length>0?t.Items[0]:null,l=0,o=0,u=0,y=a?a.time:Number.MAX_SAFE_INTEGER,P=0,f=0,b=a?.userName||e,I=a?.userImage||null,w=i.filter(n=>!n.timestamp.startsWith("USER#"));l=w.length,w.forEach(n=>{n.userName&&!b&&(b=n.userName),n.userImage&&!I&&(I=n.userImage),n.status==="success"?(o++,f+=n.time||0,a||(y=Math.min(y,n.time||Number.MAX_SAFE_INTEGER))):n.status==="defeat"&&u++}),P=o>0?Math.round(f/o):0,y===Number.MAX_SAFE_INTEGER&&(y=0);let S={userId:e,userName:b,userImage:I,totalGames:l,wins:o,losses:u,winRate:l>0?Math.round(o/l*100):0,fastestWin:y,averageWinTime:P,recentGames:w.sort((n,x)=>x.timestamp.localeCompare(n.timestamp)).slice(0,5).map(n=>({...n,userId:n.rawUserId||e}))};return{statusCode:200,headers:c,body:JSON.stringify(S)}}0&&(module.exports={handler});
