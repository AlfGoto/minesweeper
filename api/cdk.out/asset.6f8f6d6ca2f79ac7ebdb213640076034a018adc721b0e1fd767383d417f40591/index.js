"use strict";var M=Object.defineProperty;var _=Object.getOwnPropertyDescriptor;var z=Object.getOwnPropertyNames;var j=Object.prototype.hasOwnProperty;var X=(t,a)=>{for(var e in a)M(t,e,{get:a[e],enumerable:!0})},H=(t,a,e,m)=>{if(a&&typeof a=="object"||typeof a=="function")for(let s of z(a))!j.call(t,s)&&s!==e&&M(t,s,{get:()=>a[s],enumerable:!(m=_(a,s))||m.enumerable});return t};var Q=t=>H(M({},"__esModule",{value:!0}),t);var ie={};X(ie,{handler:()=>Z});module.exports=Q(ie);var V=require("@aws-sdk/client-dynamodb"),u=require("@aws-sdk/lib-dynamodb"),Y=new V.DynamoDBClient({}),E=u.DynamoDBDocumentClient.from(Y),P=process.env.TABLE_NAME,ue=process.env.STATUS_TIME_INDEX,d={"Content-Type":"application/json","Access-Control-Allow-Origin":"*","Access-Control-Allow-Methods":"GET, POST, OPTIONS","Access-Control-Allow-Headers":"Content-Type,Authorization"},Z=async t=>{if(t.httpMethod==="OPTIONS")return{statusCode:200,headers:d,body:JSON.stringify({message:"CORS enabled"})};try{let a=t.path.toLowerCase();if(a.includes("/leaderboard")){if(a.includes("/context/")){let e=t.pathParameters?.userId;return e?await ae(e):{statusCode:400,headers:d,body:JSON.stringify({message:"User ID is required"})}}return await te(t)}if(a.includes("/stats/")){let e=t.pathParameters?.userId;return e?await re(e):{statusCode:400,headers:d,body:JSON.stringify({message:"User ID is required"})}}if(a.includes("/bestgames/")){let e=t.pathParameters?.userId;if(!e)return{statusCode:400,headers:d,body:JSON.stringify({message:"User ID is required"})};let m=t.queryStringParameters?.limit?parseInt(t.queryStringParameters.limit):5;return await ne(e,m)}if(a.includes("/games")){if(t.httpMethod==="GET")return await se(t);if(t.httpMethod==="POST")return await ee(t)}return{statusCode:404,headers:d,body:JSON.stringify({message:"Endpoint not found"})}}catch(a){return console.error("Error:",a),{statusCode:500,headers:d,body:JSON.stringify({message:"Internal server error",error:a instanceof Error?a.message:String(a)})}}};async function ee(t){if(!t.body)return{statusCode:400,headers:d,body:JSON.stringify({message:"Request body is required"})};let a=JSON.parse(t.body),{userId:e,status:m,time:s,successTime:l,winTime:b,userName:n,userImage:g,usedFlags:f,bombsExploded:w,noFlagWin:o,timePlayed:c,cellsRevealed:T,gameRestarts:S}=a;if(!e||!m)return{statusCode:400,headers:d,body:JSON.stringify({message:"userId and status are required"})};let r=new Date().toISOString(),I=Number(s||l||b||0),x=Math.floor(Date.now()/1e3)+7*24*60*60,U=`USER#${e}`,W=`DATE#${r}`;console.log("Saving game with data:",{userId:e,status:m,gameTime:I,timePlayed:c,usedFlags:f,bombsExploded:w,noFlagWin:o,cellsRevealed:T,gameRestarts:S});let G={userId:U,timestamp:W,rawUserId:e,status:m,time:I,date:r,ttl:x,userName:n||e,userImage:g||null,usedFlags:typeof f=="number"?f:0,bombsExploded:typeof w=="number"?w:0,noFlagWin:o===!0,timePlayed:typeof c=="number"?c:I,cellsRevealed:typeof T=="number"?T:0,gameRestarts:typeof S=="number"?S:0};await E.send(new u.PutCommand({TableName:P,Item:G}));try{let p=await $(e,100),R=p.reduce((i,y)=>{let O=y.status;return i[O]=(i[O]||0)+1,i},{}),h=p.reduce((i,y)=>i+(typeof y.timePlayed=="number"?y.timePlayed:0),0),N=p.reduce((i,y)=>i+(typeof y.cellsRevealed=="number"?y.cellsRevealed:0),0),A=p.reduce((i,y)=>i+(typeof y.usedFlags=="number"?y.usedFlags:0),0),D=p.reduce((i,y)=>i+(typeof y.bombsExploded=="number"?y.bombsExploded:0),0),v=p.reduce((i,y)=>i+(typeof y.gameRestarts=="number"?y.gameRestarts:0),0),B=p.filter(i=>i.status==="success"&&i.noFlagWin===!0).length,C=p.filter(i=>i.status==="success"&&typeof i.time=="number"&&i.time>0),J=C.length>0?Math.min(...C.map(i=>i.time)):null,K=C.reduce((i,y)=>i+(y.time||0),0),F={userId:e,userName:n||e,userImage:g||null,status:m,timePlayed:h,cellsRevealed:N,usedFlags:A,bombsExploded:D,noFlagWin:B>0,gameTime:J||0,gameRestarts:v,totalGames:p.length,gamesWon:R.success||0,gamesLost:R.defeat||0,gamesAbandoned:R.abandoned||0,gamesRestarted:R.restarted||0,totalWinTime:K};console.log("Updating stats with params:",F),await oe(F)}catch(p){console.error("Error updating user stats:",p)}if(m==="success"&&I>0)try{let p="BEST",R=`BEST#${e}`,h=await E.send(new u.QueryCommand({TableName:P,KeyConditionExpression:"userId = :pk AND #ts = :sk",ExpressionAttributeValues:{":pk":p,":sk":R},ExpressionAttributeNames:{"#ts":"timestamp"}})),N=h.Items&&h.Items.length>0?h.Items[0]:null;if(!N||I<N.time){let A={userId:p,timestamp:R,rawUserId:e,time:I,date:r,userName:n||e,userImage:g||null,usedFlags:typeof f=="number"?f:0,noFlagWin:o===!0,timePlayed:typeof c=="number"?c:I,cellsRevealed:typeof T=="number"?T:0,gameRestarts:typeof S=="number"?S:0};await E.send(new u.PutCommand({TableName:P,Item:A}))}}catch(p){console.error("Error checking/updating best time:",p)}return{statusCode:200,headers:d,body:JSON.stringify({message:"Game saved successfully"})}}async function se(t){let a=t.queryStringParameters?.userId,e=t.queryStringParameters?.status,m=t.queryStringParameters?.limit?parseInt(t.queryStringParameters.limit):100;try{if(a){let n=`USER#${a}`,g={TableName:P,KeyConditionExpression:"userId = :userId AND begins_with(#ts, :datePrefix)",ExpressionAttributeValues:{":userId":n,":datePrefix":"DATE#"},ExpressionAttributeNames:{"#ts":"timestamp"},ScanIndexForward:!1,Limit:e==="success"?void 0:m};e&&(g.FilterExpression="#st = :status",g.ExpressionAttributeValues[":status"]=e,g.ExpressionAttributeNames["#st"]="status");let w=((await E.send(new u.QueryCommand(g))).Items||[]).map(o=>({...o,userId:o.rawUserId||(o.userId?.startsWith("USER#")?o.userId.substring(5):o.userId||a),displayTimestamp:o.timestamp?.startsWith("DATE#")?o.timestamp.substring(5):o.timestamp}));return e==="success"&&(w=w.sort((o,c)=>(o.time||0)-(c.time||0)).slice(0,m)),{statusCode:200,headers:d,body:JSON.stringify(w)}}let s={TableName:P,FilterExpression:"begins_with(#ts, :datePrefix)",ExpressionAttributeValues:{":datePrefix":"DATE#"},ExpressionAttributeNames:{"#ts":"timestamp"},Limit:m};e&&(s.FilterExpression+=" AND #st = :status",s.ExpressionAttributeValues[":status"]=e,s.ExpressionAttributeNames["#st"]="status");let b=((await E.send(new u.ScanCommand(s))).Items||[]).map(n=>({...n,userId:n.rawUserId||(n.userId?.startsWith("USER#")?n.userId.substring(5):n.userId),displayTimestamp:n.timestamp?.startsWith("DATE#")?n.timestamp.substring(5):n.timestamp}));return{statusCode:200,headers:d,body:JSON.stringify(b)}}catch(s){return console.error("Error fetching games:",s),{statusCode:500,headers:d,body:JSON.stringify({message:"Error fetching games",error:s instanceof Error?s.message:String(s)})}}}async function te(t){let a=t.queryStringParameters?.limit?parseInt(t.queryStringParameters.limit):10;try{let e={TableName:P,KeyConditionExpression:"userId = :best",ExpressionAttributeValues:{":best":"BEST"}},b=((await E.send(new u.QueryCommand(e))).Items||[]).sort((n,g)=>n.time-g.time).slice(0,a).map((n,g)=>{let f=n.rawUserId||(n.timestamp.startsWith("BEST#")?n.timestamp.substring(5):"");return{rank:g+1,userId:f,userName:n.userName||f,userImage:n.userImage||null,time:n.time,date:n.date}});return{statusCode:200,headers:d,body:JSON.stringify(b)}}catch(e){return console.error("Error fetching leaderboard:",e),{statusCode:500,headers:d,body:JSON.stringify({message:"Error fetching leaderboard",error:e instanceof Error?e.message:String(e)})}}}async function ae(t){try{let e={TableName:P,KeyConditionExpression:"userId = :best",ExpressionAttributeValues:{":best":"BEST"}},b=((await E.send(new u.QueryCommand(e))).Items||[]).sort((o,c)=>o.time-c.time).map((o,c)=>{let T=o.rawUserId||(o.timestamp.startsWith("BEST#")?o.timestamp.substring(5):"");return{rank:c+1,userId:T,userName:o.userName||T,userImage:o.userImage||null,time:o.time,date:o.date}}),n=b.findIndex(o=>o.userId===t);if(n===-1)return{statusCode:200,headers:d,body:JSON.stringify([])};let g=Math.max(0,n-2),f=Math.min(b.length-1,n+2),w=b.slice(g,f+1);return{statusCode:200,headers:d,body:JSON.stringify(w)}}catch(e){return console.error("Error fetching user leaderboard context:",e),{statusCode:500,headers:d,body:JSON.stringify({message:"Error fetching user leaderboard context",error:e instanceof Error?e.message:String(e)})}}}async function re(t){try{let a=`STAT#${t}`,e="STAT",m=await E.send(new u.GetCommand({TableName:P,Key:{userId:a,timestamp:e}}));if(m.Item){let s=m.Item;console.log("Retrieved raw stats:",s);let l=s.gamesPlayed||0,b=s.gamesWon||0,n=s.gamesLost||0,g=s.totalWinTime||0,f=s.totalTimePlayed||0,w=b>0?Math.round(g/b):0,o=l>0?Math.round(f/l):0,c=l>0?Math.round(b/l*100):0,T=Array.isArray(s.recentGames)?s.recentGames:await $(t,5),S={userId:s.rawUserId||t,userName:s.userName||t,userImage:s.userImage||null,totalGames:l,wins:b,losses:n,winRate:c,fastestWin:s.fastestWin||null,averageWinTime:w,averageGameTime:o,bombsExploded:s.totalBombsExploded||0,noFlagWins:s.noFlagWins||0,timePlayed:f,totalCellsRevealed:s.totalCellsRevealed||0,gameRestarts:s.totalGameRestarts||0,abandonedGames:s.gamesAbandoned||0,restartedGames:s.gamesRestarted||0,totalFlagsUsed:s.totalFlagsPlaced||0,recentGames:T};return console.log("Transformed stats:",S),{statusCode:200,headers:d,body:JSON.stringify(S)}}return console.log("No stats found for user:",t),{statusCode:200,headers:d,body:JSON.stringify({userId:t,userName:t,userImage:null,totalGames:0,wins:0,losses:0,winRate:0,bombsExploded:0,noFlagWins:0,timePlayed:0,averageGameTime:0,totalCellsRevealed:0,gameRestarts:0,abandonedGames:0,restartedGames:0,totalFlagsUsed:0,averageWinTime:0,fastestWin:null,recentGames:await $(t,5)})}}catch(a){return console.error(`Error in getUserStats for ${t}:`,a),{statusCode:500,headers:d,body:JSON.stringify({message:"Error fetching user stats",error:a instanceof Error?a.message:String(a)})}}}async function $(t,a=5){try{let e=`USER#${t}`,m={TableName:P,KeyConditionExpression:"userId = :userId AND begins_with(#ts, :datePrefix)",ExpressionAttributeValues:{":userId":e,":datePrefix":"DATE#"},ExpressionAttributeNames:{"#ts":"timestamp"},ScanIndexForward:!1,Limit:a};return((await E.send(new u.QueryCommand(m))).Items||[]).map(l=>({...l,userId:l.rawUserId||(l.userId.startsWith("USER#")?l.userId.substring(5):l.userId)}))}catch(e){return console.error(`Error fetching recent games for user ${t}:`,e),[]}}async function ne(t,a=5){try{let e=[],m={TableName:P,KeyConditionExpression:"userId = :best AND #ts = :sk",ExpressionAttributeValues:{":best":"BEST",":sk":`BEST#${t}`},ExpressionAttributeNames:{"#ts":"timestamp"}},s=await E.send(new u.QueryCommand(m)),l=s.Items&&s.Items.length>0?s.Items[0]:null;l&&l.time>0&&e.push({...l,userId:l.rawUserId||t,status:"success",date:l.date||new Date().toISOString()});let b=`USER#${t}`,n={TableName:P,KeyConditionExpression:"userId = :userId AND begins_with(#ts, :datePrefix)",ExpressionAttributeValues:{":userId":b,":datePrefix":"DATE#"},ExpressionAttributeNames:{"#ts":"timestamp"}},o=((await E.send(new u.QueryCommand(n))).Items||[]).map(r=>({...r,userId:r.rawUserId||(r.userId.startsWith("USER#")?r.userId.substring(5):r.userId),date:r.date||(r.timestamp.startsWith("DATE#")?r.timestamp.substring(5):r.timestamp),displayTimestamp:r.timestamp.startsWith("DATE#")?r.timestamp.substring(5):r.timestamp})).filter(r=>{let I=r.time&&r.time>0||r.successTime&&r.successTime>0||r.winTime&&r.winTime>0;return r.status==="success"&&I}).map(r=>({...r,time:r.time||r.successTime||r.winTime||0,date:r.date||new Date(r.displayTimestamp).toISOString()}));e.push(...o);let c=[],T=new Set;for(let r of e){let I=`${r.time}-${r.date}`;T.has(I)||(T.add(I),c.push(r))}let S=c.sort((r,I)=>r.time-I.time).slice(0,a);return console.log(`Found ${S.length} best games for user ${t}`),{statusCode:200,headers:d,body:JSON.stringify(S)}}catch(e){return console.error(`Error fetching best games for user ${t}:`,e),{statusCode:500,headers:d,body:JSON.stringify({message:"Error fetching best games",error:e instanceof Error?e.message:String(e)})}}}async function oe(t){let{userId:a,userName:e,userImage:m,status:s,timePlayed:l,cellsRevealed:b,usedFlags:n,bombsExploded:g,noFlagWin:f,gameTime:w,gameRestarts:o}=t;console.log("Starting updateUserStats with params:",t);let c=typeof l=="number"?l:0,T=typeof b=="number"?b:0,S=typeof n=="number"?n:0,r=typeof g=="number"?g:0,I=!!f,x=typeof w=="number"?w:0,U=typeof o=="number"?o:0,W=`STAT#${a}`,G="STAT",p=await E.send(new u.GetCommand({TableName:P,Key:{userId:W,timestamp:G}})),R=Math.floor(Date.now()/1e3)+365*24*60*60,h=new Date().toISOString();if(!p.Item){console.log("No existing stats found, creating new stats entity");let L={userId:W,timestamp:G,rawUserId:a,userName:e||a,userImage:m||null,gamesPlayed:1,gamesWon:s==="success"?1:0,gamesLost:s==="defeat"?1:0,gamesAbandoned:s==="abandoned"?1:0,gamesRestarted:s==="restarted"?1:0,totalTimePlayed:c,totalCellsRevealed:T,totalFlagsPlaced:S,totalBombsExploded:r,noFlagWins:s==="success"&&I?1:0,fastestWin:s==="success"&&x>0?x:null,totalWinTime:s==="success"&&x>0?x:0,totalGameRestarts:U,averageWinTime:s==="success"&&x>0?x:0,averageGameTime:c,lastUpdated:h,ttl:R};console.log("Creating new stats entity:",L),await E.send(new u.PutCommand({TableName:P,Item:L}));return}let N=p.Item;console.log("Found existing stats:",N);let A=N.fastestWin||null;s==="success"&&x>0&&(!A||x<A)&&(A=x);let D=N.gamesPlayed||0,v=N.gamesWon||0,B=N.totalTimePlayed||0,C=N.totalWinTime||0,J=D+1,K=B+c,F=Math.round(K/J),i=v+(s==="success"?1:0),y=C+(s==="success"?x:0),O=i>0?Math.round(y/i):0,q={TableName:P,Key:{userId:W,timestamp:G},UpdateExpression:`SET ${["gamesPlayed = gamesPlayed + :one","gamesWon = gamesWon + :win","gamesLost = gamesLost + :loss","gamesAbandoned = gamesAbandoned + :abandoned","gamesRestarted = gamesRestarted + :restarted","totalTimePlayed = totalTimePlayed + :timePlayed","totalCellsRevealed = totalCellsRevealed + :cellsRevealed","totalFlagsPlaced = totalFlagsPlaced + :usedFlags","totalBombsExploded = totalBombsExploded + :bombsExploded","noFlagWins = noFlagWins + :noFlagWin","totalWinTime = totalWinTime + :winTime","totalGameRestarts = totalGameRestarts + :gameRestarts","fastestWin = :fastestWin","averageGameTime = :averageGameTime","averageWinTime = :averageWinTime","userName = :userName","userImage = :userImage","lastUpdated = :now","ttl = :ttl"].join(", ")}`,ExpressionAttributeValues:{":one":1,":win":s==="success"?1:0,":loss":s==="defeat"?1:0,":abandoned":s==="abandoned"?1:0,":restarted":s==="restarted"?1:0,":timePlayed":c,":cellsRevealed":T,":usedFlags":S,":bombsExploded":r,":noFlagWin":s==="success"&&I?1:0,":winTime":s==="success"&&x>0?x:0,":gameRestarts":U,":fastestWin":A,":averageGameTime":F,":averageWinTime":O,":userName":e||a,":userImage":m||null,":now":h,":ttl":R}};console.log("Updating stats with params:",q),await E.send(new u.UpdateCommand(q));let k=await E.send(new u.GetCommand({TableName:P,Key:{userId:W,timestamp:G}}));console.log("Updated stats:",k.Item)}0&&(module.exports={handler});
