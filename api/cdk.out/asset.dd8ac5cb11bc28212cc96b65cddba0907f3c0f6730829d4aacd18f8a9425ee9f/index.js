"use strict";var C=Object.defineProperty;var R=Object.getOwnPropertyDescriptor;var D=Object.getOwnPropertyNames;var U=Object.prototype.hasOwnProperty;var J=(t,a)=>{for(var e in a)C(t,e,{get:a[e],enumerable:!0})},M=(t,a,e,d)=>{if(a&&typeof a=="object"||typeof a=="function")for(let n of D(a))!U.call(t,n)&&n!==e&&C(t,n,{get:()=>a[n],enumerable:!(d=R(a,n))||d.enumerable});return t};var B=t=>M(C({},"__esModule",{value:!0}),t);var $={};J($,{handler:()=>F});module.exports=B($);var O=require("@aws-sdk/client-dynamodb"),c=require("@aws-sdk/lib-dynamodb"),W=new O.DynamoDBClient({}),b=c.DynamoDBDocumentClient.from(W),p=process.env.TABLE_NAME,j=process.env.STATUS_TIME_INDEX,u={"Content-Type":"application/json","Access-Control-Allow-Origin":"*","Access-Control-Allow-Methods":"GET, POST, OPTIONS","Access-Control-Allow-Headers":"Content-Type,Authorization"},F=async t=>{if(t.httpMethod==="OPTIONS")return{statusCode:200,headers:u,body:JSON.stringify({message:"CORS enabled"})};try{let a=t.path.toLowerCase();if(a.includes("/leaderboard")){if(a.includes("/context/")){let e=t.pathParameters?.userId;return e?await V(e):{statusCode:400,headers:u,body:JSON.stringify({message:"User ID is required"})}}return await K(t)}if(a.includes("/stats/")){let e=t.pathParameters?.userId;return e?await k(e):{statusCode:400,headers:u,body:JSON.stringify({message:"User ID is required"})}}if(a.includes("/bestgames/")){let e=t.pathParameters?.userId;if(!e)return{statusCode:400,headers:u,body:JSON.stringify({message:"User ID is required"})};let d=t.queryStringParameters?.limit?parseInt(t.queryStringParameters.limit):5;return await L(e,d)}if(a.includes("/games")){if(t.httpMethod==="GET")return await q(t);if(t.httpMethod==="POST")return await _(t)}return{statusCode:404,headers:u,body:JSON.stringify({message:"Endpoint not found"})}}catch(a){return console.error("Error:",a),{statusCode:500,headers:u,body:JSON.stringify({message:"Internal server error",error:a instanceof Error?a.message:String(a)})}}};async function _(t){if(!t.body)return{statusCode:400,headers:u,body:JSON.stringify({message:"Request body is required"})};let a=JSON.parse(t.body),{userId:e,status:d,time:n,successTime:S,winTime:l,userName:s,userImage:o,usedFlags:m,bombsExploded:I,noFlagWin:r,timePlayed:y}=a;if(!e||!d)return{statusCode:400,headers:u,body:JSON.stringify({message:"userId and status are required"})};let g=new Date().toISOString(),f=Number(n||S||l||0),N=Math.floor(Date.now()/1e3)+90*24*60*60,A=`USER#${e}`,T=`DATE#${g}`,P={userId:A,timestamp:T,rawUserId:e,status:d,time:f,date:g,ttl:N,userName:s||e,userImage:o||null,usedFlags:m!==void 0?m:null,bombsExploded:I!==void 0?I:null,noFlagWin:r!==void 0?r:null,timePlayed:y!==void 0?y:null};if(await b.send(new c.PutCommand({TableName:p,Item:P})),d==="success"&&f>0)try{let E="BEST",x=`BEST#${e}`,w=await b.send(new c.QueryCommand({TableName:p,KeyConditionExpression:"userId = :pk AND #ts = :sk",ExpressionAttributeValues:{":pk":E,":sk":x},ExpressionAttributeNames:{"#ts":"timestamp"}})),h=w.Items&&w.Items.length>0?w.Items[0]:null;if(!h||f<h.time){let i={userId:E,timestamp:x,rawUserId:e,time:f,date:g,ttl:Math.floor(Date.now()/1e3)+31536e3,userName:s||e,userImage:o||null,usedFlags:m!==void 0?m:null,noFlagWin:r!==void 0?r:null,timePlayed:y!==void 0?y:null};await b.send(new c.PutCommand({TableName:p,Item:i}))}}catch(E){console.error("Error checking/updating best time:",E)}return{statusCode:200,headers:u,body:JSON.stringify({message:"Game result stored successfully",item:P})}}async function q(t){let a=t.queryStringParameters?.userId,e=t.queryStringParameters?.status,d=t.queryStringParameters?.limit?parseInt(t.queryStringParameters.limit):100;try{if(a){let s=`USER#${a}`,o={TableName:p,KeyConditionExpression:"userId = :userId AND begins_with(#ts, :datePrefix)",ExpressionAttributeValues:{":userId":s,":datePrefix":"DATE#"},ExpressionAttributeNames:{"#ts":"timestamp"},ScanIndexForward:!1,Limit:e==="success"?void 0:d};e&&(o.FilterExpression="#st = :status",o.ExpressionAttributeValues[":status"]=e,o.ExpressionAttributeNames["#st"]="status");let I=((await b.send(new c.QueryCommand(o))).Items||[]).map(r=>({...r,userId:r.rawUserId||(r.userId.startsWith("USER#")?r.userId.substring(5):r.userId),displayTimestamp:r.timestamp.startsWith("DATE#")?r.timestamp.substring(5):r.timestamp}));return e==="success"&&(I=I.sort((r,y)=>r.time-y.time).slice(0,d)),{statusCode:200,headers:u,body:JSON.stringify(I)}}let n={TableName:p,FilterExpression:"begins_with(#ts, :datePrefix)",ExpressionAttributeValues:{":datePrefix":"DATE#"},ExpressionAttributeNames:{"#ts":"timestamp"},Limit:d};e&&(n.FilterExpression+=" AND #st = :status",n.ExpressionAttributeValues[":status"]=e,n.ExpressionAttributeNames["#st"]="status");let l=((await b.send(new c.ScanCommand(n))).Items||[]).map(s=>({...s,userId:s.rawUserId||(s.userId.startsWith("USER#")?s.userId.substring(5):s.userId),displayTimestamp:s.timestamp.startsWith("DATE#")?s.timestamp.substring(5):s.timestamp}));return{statusCode:200,headers:u,body:JSON.stringify(l)}}catch(n){return console.error("Error fetching games:",n),{statusCode:500,headers:u,body:JSON.stringify({message:"Error fetching games",error:n instanceof Error?n.message:String(n)})}}}async function K(t){let a=t.queryStringParameters?.limit?parseInt(t.queryStringParameters.limit):10;try{let e={TableName:p,KeyConditionExpression:"userId = :best",ExpressionAttributeValues:{":best":"BEST"}},l=((await b.send(new c.QueryCommand(e))).Items||[]).sort((s,o)=>s.time-o.time).slice(0,a).map((s,o)=>{let m=s.rawUserId||(s.timestamp.startsWith("BEST#")?s.timestamp.substring(5):"");return{rank:o+1,userId:m,userName:s.userName||m,userImage:s.userImage||null,time:s.time,date:s.date}});return{statusCode:200,headers:u,body:JSON.stringify(l)}}catch(e){return console.error("Error fetching leaderboard:",e),{statusCode:500,headers:u,body:JSON.stringify({message:"Error fetching leaderboard",error:e instanceof Error?e.message:String(e)})}}}async function V(t){try{let e={TableName:p,KeyConditionExpression:"userId = :best",ExpressionAttributeValues:{":best":"BEST"}},l=((await b.send(new c.QueryCommand(e))).Items||[]).sort((r,y)=>r.time-y.time).map((r,y)=>{let g=r.rawUserId||(r.timestamp.startsWith("BEST#")?r.timestamp.substring(5):"");return{rank:y+1,userId:g,userName:r.userName||g,userImage:r.userImage||null,time:r.time,date:r.date}}),s=l.findIndex(r=>r.userId===t);if(s===-1)return{statusCode:200,headers:u,body:JSON.stringify([])};let o=Math.max(0,s-2),m=Math.min(l.length-1,s+2),I=l.slice(o,m+1);return{statusCode:200,headers:u,body:JSON.stringify(I)}}catch(e){return console.error("Error fetching user leaderboard context:",e),{statusCode:500,headers:u,body:JSON.stringify({message:"Error fetching user leaderboard context",error:e instanceof Error?e.message:String(e)})}}}async function k(t){let a=`USER#${t}`,e={TableName:p,KeyConditionExpression:"userId = :userId",ExpressionAttributeValues:{":userId":a}},n=(await b.send(new c.QueryCommand(e))).Items||[],S={TableName:p,KeyConditionExpression:"userId = :best AND #ts = :sk",ExpressionAttributeValues:{":best":"BEST",":sk":`BEST#${t}`},ExpressionAttributeNames:{"#ts":"timestamp"}},l=await b.send(new c.QueryCommand(S)),s=l.Items&&l.Items.length>0?l.Items[0]:null,o=0,m=0,I=0,r=s?s.time:Number.MAX_SAFE_INTEGER,y=0,g=0,f=s?.userName||t,N=s?.userImage||null,A=0,T=0,P=0,E=0,x=n.filter(i=>i.timestamp.startsWith("DATE#"));o=x.length,x.forEach(i=>{i.userName&&!f&&(f=i.userName),i.userImage&&!N&&(N=i.userImage),i.bombsExploded&&(A+=i.bombsExploded),i.status==="success"&&i.noFlagWin===!0&&T++,i.timePlayed&&typeof i.timePlayed=="number"&&(P+=i.timePlayed,E++),i.status==="success"?(m++,g+=i.time||0,s||(r=Math.min(r,i.time||Number.MAX_SAFE_INTEGER))):i.status==="defeat"&&I++}),y=m>0?Math.round(g/m):0;let w=E>0?Math.round(P/E):0;r===Number.MAX_SAFE_INTEGER&&(r=0);let h={userId:t,userName:f,userImage:N,totalGames:o,wins:m,losses:I,winRate:o>0?Math.round(m/o*100):0,fastestWin:r,averageWinTime:y,bombsExploded:A,noFlagWins:T,timePlayed:P,averageGameTime:w,recentGames:x.sort((i,G)=>G.timestamp.localeCompare(i.timestamp)).slice(0,5).map(i=>({...i,userId:i.rawUserId||t}))};return{statusCode:200,headers:u,body:JSON.stringify(h)}}async function L(t,a=5){let e=`USER#${t}`,d={TableName:p,KeyConditionExpression:"userId = :userId AND begins_with(#ts, :datePrefix)",ExpressionAttributeValues:{":userId":e,":datePrefix":"DATE#",":status":"success"},ExpressionAttributeNames:{"#ts":"timestamp","#st":"status"},FilterExpression:"#st = :status"};try{let l=((await b.send(new c.QueryCommand(d))).Items||[]).map(s=>({...s,userId:s.rawUserId||(s.userId.startsWith("USER#")?s.userId.substring(5):s.userId),displayTimestamp:s.timestamp.startsWith("DATE#")?s.timestamp.substring(5):s.timestamp})).sort((s,o)=>s.time-o.time).slice(0,a);return{statusCode:200,headers:u,body:JSON.stringify(l)}}catch(n){return console.error(`Error fetching best games for user ${t}:`,n),{statusCode:500,headers:u,body:JSON.stringify({message:"Error fetching best games",error:n instanceof Error?n.message:String(n)})}}}0&&(module.exports={handler});
