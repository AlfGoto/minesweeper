"use strict";var U=Object.defineProperty;var $=Object.getOwnPropertyDescriptor;var q=Object.getOwnPropertyNames;var M=Object.prototype.hasOwnProperty;var L=(t,a)=>{for(var e in a)U(t,e,{get:a[e],enumerable:!0})},V=(t,a,e,i)=>{if(a&&typeof a=="object"||typeof a=="function")for(let s of q(a))!M.call(t,s)&&s!==e&&U(t,s,{get:()=>a[s],enumerable:!(i=$(a,s))||i.enumerable});return t};var k=t=>V(U({},"__esModule",{value:!0}),t);var ae={};L(ae,{handler:()=>X});module.exports=k(ae);var _=require("@aws-sdk/client-dynamodb"),u=require("@aws-sdk/lib-dynamodb"),j=new _.DynamoDBClient({}),E=u.DynamoDBDocumentClient.from(j),w=process.env.TABLE_NAME,ie=process.env.STATUS_TIME_INDEX,d={"Content-Type":"application/json","Access-Control-Allow-Origin":"*","Access-Control-Allow-Methods":"GET, POST, OPTIONS","Access-Control-Allow-Headers":"Content-Type,Authorization"},X=async t=>{if(t.httpMethod==="OPTIONS")return{statusCode:200,headers:d,body:JSON.stringify({message:"CORS enabled"})};try{let a=t.path.toLowerCase();if(a.includes("/leaderboard")){if(a.includes("/context/")){let e=t.pathParameters?.userId;return e?await Z(e):{statusCode:400,headers:d,body:JSON.stringify({message:"User ID is required"})}}return await Y(t)}if(a.includes("/stats/")){let e=t.pathParameters?.userId;return e?await ee(e):{statusCode:400,headers:d,body:JSON.stringify({message:"User ID is required"})}}if(a.includes("/bestgames/")){let e=t.pathParameters?.userId;if(!e)return{statusCode:400,headers:d,body:JSON.stringify({message:"User ID is required"})};let i=t.queryStringParameters?.limit?parseInt(t.queryStringParameters.limit):5;return await se(e,i)}if(a.includes("/games")){if(t.httpMethod==="GET")return await Q(t);if(t.httpMethod==="POST")return await H(t)}return{statusCode:404,headers:d,body:JSON.stringify({message:"Endpoint not found"})}}catch(a){return console.error("Error:",a),{statusCode:500,headers:d,body:JSON.stringify({message:"Internal server error",error:a instanceof Error?a.message:String(a)})}}};async function H(t){if(!t.body)return{statusCode:400,headers:d,body:JSON.stringify({message:"Request body is required"})};let a=JSON.parse(t.body),{userId:e,status:i,time:s,successTime:m,winTime:y,userName:n,userImage:c,usedFlags:b,bombsExploded:f,noFlagWin:o,timePlayed:l,cellsRevealed:p,gameRestarts:I}=a;if(!e||!i)return{statusCode:400,headers:d,body:JSON.stringify({message:"userId and status are required"})};let r=new Date().toISOString(),g=Number(s||m||y||0),x=Math.floor(Date.now()/1e3)+7*24*60*60,G=`USER#${e}`,N=`DATE#${r}`;console.log("Saving game with data:",{userId:e,status:i,gameTime:g,timePlayed:l,usedFlags:b,bombsExploded:f,noFlagWin:o,cellsRevealed:p,gameRestarts:I});let A={userId:G,timestamp:N,rawUserId:e,status:i,time:g,date:r,ttl:x,userName:n||e,userImage:c||null,usedFlags:typeof b=="number"?b:0,bombsExploded:typeof f=="number"?f:0,noFlagWin:o===!0,timePlayed:typeof l=="number"?l:g,cellsRevealed:typeof p=="number"?p:0,gameRestarts:typeof I=="number"?I:0};await E.send(new u.PutCommand({TableName:w,Item:A}));try{let T={userId:e,userName:n||e,userImage:c||null,status:i,timePlayed:typeof l=="number"?l:g,cellsRevealed:typeof p=="number"?p:0,usedFlags:typeof b=="number"?b:0,bombsExploded:typeof f=="number"?f:0,noFlagWin:o===!0,gameTime:g>0?g:0,gameRestarts:typeof I=="number"?I:0};console.log("Updating stats with params:",T),await te(T)}catch(T){console.error("Error updating user stats:",T)}if(i==="success"&&g>0)try{let T="BEST",C=`BEST#${e}`,P=await E.send(new u.QueryCommand({TableName:w,KeyConditionExpression:"userId = :pk AND #ts = :sk",ExpressionAttributeValues:{":pk":T,":sk":C},ExpressionAttributeNames:{"#ts":"timestamp"}})),S=P.Items&&P.Items.length>0?P.Items[0]:null;if(!S||g<S.time){let R={userId:T,timestamp:C,rawUserId:e,time:g,date:r,userName:n||e,userImage:c||null,usedFlags:typeof b=="number"?b:0,noFlagWin:o===!0,timePlayed:typeof l=="number"?l:g,cellsRevealed:typeof p=="number"?p:0,gameRestarts:typeof I=="number"?I:0};await E.send(new u.PutCommand({TableName:w,Item:R}))}}catch(T){console.error("Error checking/updating best time:",T)}return{statusCode:200,headers:d,body:JSON.stringify({message:"Game saved successfully"})}}async function Q(t){let a=t.queryStringParameters?.userId,e=t.queryStringParameters?.status,i=t.queryStringParameters?.limit?parseInt(t.queryStringParameters.limit):100;try{if(a){let n=`USER#${a}`,c={TableName:w,KeyConditionExpression:"userId = :userId AND begins_with(#ts, :datePrefix)",ExpressionAttributeValues:{":userId":n,":datePrefix":"DATE#"},ExpressionAttributeNames:{"#ts":"timestamp"},ScanIndexForward:!1,Limit:e==="success"?void 0:i};e&&(c.FilterExpression="#st = :status",c.ExpressionAttributeValues[":status"]=e,c.ExpressionAttributeNames["#st"]="status");let f=((await E.send(new u.QueryCommand(c))).Items||[]).map(o=>({...o,userId:o.rawUserId||(o.userId?.startsWith("USER#")?o.userId.substring(5):o.userId||a),displayTimestamp:o.timestamp?.startsWith("DATE#")?o.timestamp.substring(5):o.timestamp}));return e==="success"&&(f=f.sort((o,l)=>(o.time||0)-(l.time||0)).slice(0,i)),{statusCode:200,headers:d,body:JSON.stringify(f)}}let s={TableName:w,FilterExpression:"begins_with(#ts, :datePrefix)",ExpressionAttributeValues:{":datePrefix":"DATE#"},ExpressionAttributeNames:{"#ts":"timestamp"},Limit:i};e&&(s.FilterExpression+=" AND #st = :status",s.ExpressionAttributeValues[":status"]=e,s.ExpressionAttributeNames["#st"]="status");let y=((await E.send(new u.ScanCommand(s))).Items||[]).map(n=>({...n,userId:n.rawUserId||(n.userId?.startsWith("USER#")?n.userId.substring(5):n.userId),displayTimestamp:n.timestamp?.startsWith("DATE#")?n.timestamp.substring(5):n.timestamp}));return{statusCode:200,headers:d,body:JSON.stringify(y)}}catch(s){return console.error("Error fetching games:",s),{statusCode:500,headers:d,body:JSON.stringify({message:"Error fetching games",error:s instanceof Error?s.message:String(s)})}}}async function Y(t){let a=t.queryStringParameters?.limit?parseInt(t.queryStringParameters.limit):10;try{let e={TableName:w,KeyConditionExpression:"userId = :best",ExpressionAttributeValues:{":best":"BEST"}},y=((await E.send(new u.QueryCommand(e))).Items||[]).sort((n,c)=>n.time-c.time).slice(0,a).map((n,c)=>{let b=n.rawUserId||(n.timestamp.startsWith("BEST#")?n.timestamp.substring(5):"");return{rank:c+1,userId:b,userName:n.userName||b,userImage:n.userImage||null,time:n.time,date:n.date}});return{statusCode:200,headers:d,body:JSON.stringify(y)}}catch(e){return console.error("Error fetching leaderboard:",e),{statusCode:500,headers:d,body:JSON.stringify({message:"Error fetching leaderboard",error:e instanceof Error?e.message:String(e)})}}}async function Z(t){try{let e={TableName:w,KeyConditionExpression:"userId = :best",ExpressionAttributeValues:{":best":"BEST"}},y=((await E.send(new u.QueryCommand(e))).Items||[]).sort((o,l)=>o.time-l.time).map((o,l)=>{let p=o.rawUserId||(o.timestamp.startsWith("BEST#")?o.timestamp.substring(5):"");return{rank:l+1,userId:p,userName:o.userName||p,userImage:o.userImage||null,time:o.time,date:o.date}}),n=y.findIndex(o=>o.userId===t);if(n===-1)return{statusCode:200,headers:d,body:JSON.stringify([])};let c=Math.max(0,n-2),b=Math.min(y.length-1,n+2),f=y.slice(c,b+1);return{statusCode:200,headers:d,body:JSON.stringify(f)}}catch(e){return console.error("Error fetching user leaderboard context:",e),{statusCode:500,headers:d,body:JSON.stringify({message:"Error fetching user leaderboard context",error:e instanceof Error?e.message:String(e)})}}}async function ee(t){try{let a=`STAT#${t}`,e="STAT",i=await E.send(new u.GetCommand({TableName:w,Key:{userId:a,timestamp:e}}));if(i.Item){let s=i.Item;console.log("Retrieved raw stats:",s);let m=s.gamesPlayed||0,y=s.gamesWon||0,n=s.gamesLost||0,c=s.totalWinTime||0,b=s.totalTimePlayed||0,f=y>0?Math.round(c/y):0,o=m>0?Math.round(b/m):0,l=m>0?Math.round(y/m*100):0,p=Array.isArray(s.recentGames)?s.recentGames:await D(t,5),I={userId:s.rawUserId||t,userName:s.userName||t,userImage:s.userImage||null,totalGames:m,wins:y,losses:n,winRate:l,fastestWin:s.fastestWin||null,averageWinTime:f,averageGameTime:o,bombsExploded:s.totalBombsExploded||0,noFlagWins:s.noFlagWins||0,timePlayed:b,totalCellsRevealed:s.totalCellsRevealed||0,gameRestarts:s.totalGameRestarts||0,abandonedGames:s.gamesAbandoned||0,restartedGames:s.gamesRestarted||0,totalFlagsUsed:s.totalFlagsPlaced||0,recentGames:p};return console.log("Transformed stats:",I),{statusCode:200,headers:d,body:JSON.stringify(I)}}return console.log("No stats found for user:",t),{statusCode:200,headers:d,body:JSON.stringify({userId:t,userName:t,userImage:null,totalGames:0,wins:0,losses:0,winRate:0,bombsExploded:0,noFlagWins:0,timePlayed:0,averageGameTime:0,totalCellsRevealed:0,gameRestarts:0,abandonedGames:0,restartedGames:0,totalFlagsUsed:0,averageWinTime:0,fastestWin:null,recentGames:await D(t,5)})}}catch(a){return console.error(`Error in getUserStats for ${t}:`,a),{statusCode:500,headers:d,body:JSON.stringify({message:"Error fetching user stats",error:a instanceof Error?a.message:String(a)})}}}async function D(t,a=5){try{let e=`USER#${t}`,i={TableName:w,KeyConditionExpression:"userId = :userId AND begins_with(#ts, :datePrefix)",ExpressionAttributeValues:{":userId":e,":datePrefix":"DATE#"},ExpressionAttributeNames:{"#ts":"timestamp"},ScanIndexForward:!1,Limit:a};return((await E.send(new u.QueryCommand(i))).Items||[]).map(m=>({...m,userId:m.rawUserId||(m.userId.startsWith("USER#")?m.userId.substring(5):m.userId)}))}catch(e){return console.error(`Error fetching recent games for user ${t}:`,e),[]}}async function se(t,a=5){try{let e=[],i={TableName:w,KeyConditionExpression:"userId = :best AND #ts = :sk",ExpressionAttributeValues:{":best":"BEST",":sk":`BEST#${t}`},ExpressionAttributeNames:{"#ts":"timestamp"}},s=await E.send(new u.QueryCommand(i)),m=s.Items&&s.Items.length>0?s.Items[0]:null;m&&m.time>0&&e.push({...m,userId:m.rawUserId||t,status:"success",date:m.date||new Date().toISOString()});let y=`USER#${t}`,n={TableName:w,KeyConditionExpression:"userId = :userId AND begins_with(#ts, :datePrefix)",ExpressionAttributeValues:{":userId":y,":datePrefix":"DATE#"},ExpressionAttributeNames:{"#ts":"timestamp"}},o=((await E.send(new u.QueryCommand(n))).Items||[]).map(r=>({...r,userId:r.rawUserId||(r.userId.startsWith("USER#")?r.userId.substring(5):r.userId),date:r.date||(r.timestamp.startsWith("DATE#")?r.timestamp.substring(5):r.timestamp),displayTimestamp:r.timestamp.startsWith("DATE#")?r.timestamp.substring(5):r.timestamp})).filter(r=>{let g=r.time&&r.time>0||r.successTime&&r.successTime>0||r.winTime&&r.winTime>0;return r.status==="success"&&g}).map(r=>({...r,time:r.time||r.successTime||r.winTime||0,date:r.date||new Date(r.displayTimestamp).toISOString()}));e.push(...o);let l=[],p=new Set;for(let r of e){let g=`${r.time}-${r.date}`;p.has(g)||(p.add(g),l.push(r))}let I=l.sort((r,g)=>r.time-g.time).slice(0,a);return console.log(`Found ${I.length} best games for user ${t}`),{statusCode:200,headers:d,body:JSON.stringify(I)}}catch(e){return console.error(`Error fetching best games for user ${t}:`,e),{statusCode:500,headers:d,body:JSON.stringify({message:"Error fetching best games",error:e instanceof Error?e.message:String(e)})}}}async function te(t){let{userId:a,userName:e,userImage:i,status:s,timePlayed:m,cellsRevealed:y,usedFlags:n,bombsExploded:c,noFlagWin:b,gameTime:f,gameRestarts:o}=t;console.log("Starting updateUserStats with params:",t);let l=typeof m=="number"?m:0,p=typeof y=="number"?y:0,I=typeof n=="number"?n:0,r=typeof c=="number"?c:0,g=!!b,x=typeof f=="number"?f:0,G=typeof o=="number"?o:0,N=`STAT#${a}`,A="STAT",T=await E.send(new u.GetCommand({TableName:w,Key:{userId:N,timestamp:A}})),C=Math.floor(Date.now()/1e3)+365*24*60*60,P=new Date().toISOString();if(!T.Item){console.log("No existing stats found, creating new stats entity");let O={userId:N,timestamp:A,rawUserId:a,userName:e||a,userImage:i||null,gamesPlayed:1,gamesWon:s==="success"?1:0,gamesLost:s==="defeat"?1:0,gamesAbandoned:s==="abandoned"?1:0,gamesRestarted:s==="restarted"?1:0,totalTimePlayed:l,totalCellsRevealed:p,totalFlagsPlaced:I,totalBombsExploded:r,noFlagWins:s==="success"&&g?1:0,fastestWin:s==="success"&&x>0?x:null,totalWinTime:s==="success"&&x>0?x:0,totalGameRestarts:G,lastUpdated:P,ttl:C};console.log("Creating new stats entity:",O),await E.send(new u.PutCommand({TableName:w,Item:O}));return}let S=T.Item;console.log("Found existing stats:",S);let R=s==="success",B=s==="defeat",J=s==="abandoned",K=s==="restarted",h=S.fastestWin||null;R&&x>0?!h||x<h?h=x:h=S.fastestWin:h=S.fastestWin||null;let W=Array.isArray(S.recentGames)?S.recentGames:[],v={status:s,time:x,date:P,usedFlags:I,cellsRevealed:p,bombsExploded:r};W.unshift(v),W=W.slice(0,5);let F={TableName:w,Key:{userId:N,timestamp:A},UpdateExpression:`SET ${["gamesPlayed = if_not_exists(gamesPlayed, :zero) + :one","gamesWon = if_not_exists(gamesWon, :zero) + :win","gamesLost = if_not_exists(gamesLost, :zero) + :loss","gamesAbandoned = if_not_exists(gamesAbandoned, :zero) + :abandoned","gamesRestarted = if_not_exists(gamesRestarted, :zero) + :restarted","totalTimePlayed = if_not_exists(totalTimePlayed, :zero) + :timePlayed","totalCellsRevealed = if_not_exists(totalCellsRevealed, :zero) + :cellsRevealed","totalFlagsPlaced = if_not_exists(totalFlagsPlaced, :zero) + :usedFlags","totalBombsExploded = if_not_exists(totalBombsExploded, :zero) + :bombsExploded","noFlagWins = if_not_exists(noFlagWins, :zero) + :noFlagWin","totalWinTime = if_not_exists(totalWinTime, :zero) + :winTime","totalGameRestarts = if_not_exists(totalGameRestarts, :zero) + :gameRestarts","fastestWin = :fastestWin","userName = :userName","userImage = :userImage","lastUpdated = :now","ttl = :ttl","recentGames = :recentGames"].join(", ")}`,ExpressionAttributeValues:{":one":1,":win":R?1:0,":loss":B?1:0,":abandoned":J?1:0,":restarted":K?1:0,":zero":0,":timePlayed":l,":cellsRevealed":p,":usedFlags":I,":bombsExploded":r,":noFlagWin":R&&g?1:0,":winTime":R&&x>0?x:0,":gameRestarts":G,":fastestWin":h,":userName":e||a,":userImage":i||null,":now":P,":ttl":C,":recentGames":W}};console.log("Updating stats with params:",F),await E.send(new u.UpdateCommand(F));let z=await E.send(new u.GetCommand({TableName:w,Key:{userId:N,timestamp:A}}));console.log("Updated stats:",z.Item)}0&&(module.exports={handler});
