"use strict";var O=Object.defineProperty;var V=Object.getOwnPropertyDescriptor;var k=Object.getOwnPropertyNames;var j=Object.prototype.hasOwnProperty;var X=(s,a)=>{for(var e in a)O(s,e,{get:a[e],enumerable:!0})},H=(s,a,e,i)=>{if(a&&typeof a=="object"||typeof a=="function")for(let t of k(a))!j.call(s,t)&&t!==e&&O(s,t,{get:()=>a[t],enumerable:!(i=V(a,t))||i.enumerable});return s};var Q=s=>H(O({},"__esModule",{value:!0}),s);var ie={};X(ie,{handler:()=>Z});module.exports=Q(ie);var M=require("@aws-sdk/client-dynamodb"),l=require("@aws-sdk/lib-dynamodb"),Y=new M.DynamoDBClient({}),E=l.DynamoDBDocumentClient.from(Y),w=process.env.TABLE_NAME,de=process.env.STATUS_TIME_INDEX,u={"Content-Type":"application/json","Access-Control-Allow-Origin":"*","Access-Control-Allow-Methods":"GET, POST, OPTIONS","Access-Control-Allow-Headers":"Content-Type,Authorization"},Z=async s=>{if(s.httpMethod==="OPTIONS")return{statusCode:200,headers:u,body:JSON.stringify({message:"CORS enabled"})};try{let a=s.path.toLowerCase();if(a.includes("/leaderboard")){if(a.includes("/context/")){let e=s.pathParameters?.userId;return e?await ae(e):{statusCode:400,headers:u,body:JSON.stringify({message:"User ID is required"})}}return await te(s)}if(a.includes("/stats/")){let e=s.pathParameters?.userId;return e?await re(e):{statusCode:400,headers:u,body:JSON.stringify({message:"User ID is required"})}}if(a.includes("/bestgames/")){let e=s.pathParameters?.userId;if(!e)return{statusCode:400,headers:u,body:JSON.stringify({message:"User ID is required"})};let i=s.queryStringParameters?.limit?parseInt(s.queryStringParameters.limit):5;return await ne(e,i)}if(a.includes("/games")){if(s.httpMethod==="GET")return await se(s);if(s.httpMethod==="POST")return await ee(s)}return{statusCode:404,headers:u,body:JSON.stringify({message:"Endpoint not found"})}}catch(a){return console.error("Error:",a),{statusCode:500,headers:u,body:JSON.stringify({message:"Internal server error",error:a instanceof Error?a.message:String(a)})}}};async function ee(s){if(!s.body)return{statusCode:400,headers:u,body:JSON.stringify({message:"Request body is required"})};let a=JSON.parse(s.body),{userId:e,status:i,time:t,successTime:m,winTime:y,userName:n,userImage:c,usedFlags:b,bombsExploded:f,noFlagWin:o,timePlayed:d,cellsRevealed:p,gameRestarts:I}=a;if(!e||!i)return{statusCode:400,headers:u,body:JSON.stringify({message:"userId and status are required"})};let r=new Date().toISOString(),g=Number(t||m||y||0),T=Math.floor(Date.now()/1e3)+7*24*60*60,W=`USER#${e}`,N=`DATE#${r}`;console.log("Saving game with data:",{userId:e,status:i,gameTime:g,timePlayed:d,usedFlags:b,bombsExploded:f,noFlagWin:o,cellsRevealed:p,gameRestarts:I});let h={userId:W,timestamp:N,rawUserId:e,status:i,time:g,date:r,ttl:T,userName:n||e,userImage:c||null,usedFlags:typeof b=="number"?b:0,bombsExploded:typeof f=="number"?f:0,noFlagWin:o===!0,timePlayed:typeof d=="number"?d:g,cellsRevealed:typeof p=="number"?p:0,gameRestarts:typeof I=="number"?I:0};await E.send(new l.PutCommand({TableName:w,Item:h}));try{let S={userId:e,userName:n||e,userImage:c||null,status:i,timePlayed:typeof d=="number"?d:g,cellsRevealed:typeof p=="number"?p:0,usedFlags:typeof b=="number"?b:0,bombsExploded:typeof f=="number"?f:0,noFlagWin:o===!0,gameTime:g>0?g:0,gameRestarts:typeof I=="number"?I:0};console.log("Updating stats with params:",S),await oe(S)}catch(S){console.error("Error updating user stats:",S)}if(i==="success"&&g>0)try{let S="BEST",G=`BEST#${e}`,A=await E.send(new l.QueryCommand({TableName:w,KeyConditionExpression:"userId = :pk AND #ts = :sk",ExpressionAttributeValues:{":pk":S,":sk":G},ExpressionAttributeNames:{"#ts":"timestamp"}})),R=A.Items&&A.Items.length>0?A.Items[0]:null;if(!R||g<R.time){let P={userId:S,timestamp:G,rawUserId:e,time:g,date:r,userName:n||e,userImage:c||null,usedFlags:typeof b=="number"?b:0,noFlagWin:o===!0,timePlayed:typeof d=="number"?d:g,cellsRevealed:typeof p=="number"?p:0,gameRestarts:typeof I=="number"?I:0};await E.send(new l.PutCommand({TableName:w,Item:P}))}}catch(S){console.error("Error checking/updating best time:",S)}return{statusCode:200,headers:u,body:JSON.stringify({message:"Game saved successfully"})}}async function se(s){let a=s.queryStringParameters?.userId,e=s.queryStringParameters?.status,i=s.queryStringParameters?.limit?parseInt(s.queryStringParameters.limit):100;try{if(a){let n=`USER#${a}`,c={TableName:w,KeyConditionExpression:"userId = :userId AND begins_with(#ts, :datePrefix)",ExpressionAttributeValues:{":userId":n,":datePrefix":"DATE#"},ExpressionAttributeNames:{"#ts":"timestamp"},ScanIndexForward:!1,Limit:e==="success"?void 0:i};e&&(c.FilterExpression="#st = :status",c.ExpressionAttributeValues[":status"]=e,c.ExpressionAttributeNames["#st"]="status");let f=((await E.send(new l.QueryCommand(c))).Items||[]).map(o=>({...o,userId:o.rawUserId||(o.userId?.startsWith("USER#")?o.userId.substring(5):o.userId||a),displayTimestamp:o.timestamp?.startsWith("DATE#")?o.timestamp.substring(5):o.timestamp}));return e==="success"&&(f=f.sort((o,d)=>(o.time||0)-(d.time||0)).slice(0,i)),{statusCode:200,headers:u,body:JSON.stringify(f)}}let t={TableName:w,FilterExpression:"begins_with(#ts, :datePrefix)",ExpressionAttributeValues:{":datePrefix":"DATE#"},ExpressionAttributeNames:{"#ts":"timestamp"},Limit:i};e&&(t.FilterExpression+=" AND #st = :status",t.ExpressionAttributeValues[":status"]=e,t.ExpressionAttributeNames["#st"]="status");let y=((await E.send(new l.ScanCommand(t))).Items||[]).map(n=>({...n,userId:n.rawUserId||(n.userId?.startsWith("USER#")?n.userId.substring(5):n.userId),displayTimestamp:n.timestamp?.startsWith("DATE#")?n.timestamp.substring(5):n.timestamp}));return{statusCode:200,headers:u,body:JSON.stringify(y)}}catch(t){return console.error("Error fetching games:",t),{statusCode:500,headers:u,body:JSON.stringify({message:"Error fetching games",error:t instanceof Error?t.message:String(t)})}}}async function te(s){let a=s.queryStringParameters?.limit?parseInt(s.queryStringParameters.limit):10;try{let e={TableName:w,KeyConditionExpression:"userId = :best",ExpressionAttributeValues:{":best":"BEST"}},y=((await E.send(new l.QueryCommand(e))).Items||[]).sort((n,c)=>n.time-c.time).slice(0,a).map((n,c)=>{let b=n.rawUserId||(n.timestamp.startsWith("BEST#")?n.timestamp.substring(5):"");return{rank:c+1,userId:b,userName:n.userName||b,userImage:n.userImage||null,time:n.time,date:n.date}});return{statusCode:200,headers:u,body:JSON.stringify(y)}}catch(e){return console.error("Error fetching leaderboard:",e),{statusCode:500,headers:u,body:JSON.stringify({message:"Error fetching leaderboard",error:e instanceof Error?e.message:String(e)})}}}async function ae(s){try{let e={TableName:w,KeyConditionExpression:"userId = :best",ExpressionAttributeValues:{":best":"BEST"}},y=((await E.send(new l.QueryCommand(e))).Items||[]).sort((o,d)=>o.time-d.time).map((o,d)=>{let p=o.rawUserId||(o.timestamp.startsWith("BEST#")?o.timestamp.substring(5):"");return{rank:d+1,userId:p,userName:o.userName||p,userImage:o.userImage||null,time:o.time,date:o.date}}),n=y.findIndex(o=>o.userId===s);if(n===-1)return{statusCode:200,headers:u,body:JSON.stringify([])};let c=Math.max(0,n-2),b=Math.min(y.length-1,n+2),f=y.slice(c,b+1);return{statusCode:200,headers:u,body:JSON.stringify(f)}}catch(e){return console.error("Error fetching user leaderboard context:",e),{statusCode:500,headers:u,body:JSON.stringify({message:"Error fetching user leaderboard context",error:e instanceof Error?e.message:String(e)})}}}async function re(s){try{let a=`STAT#${s}`,e="STAT",i=await E.send(new l.GetCommand({TableName:w,Key:{userId:a,timestamp:e}}));if(i.Item){let t=i.Item;console.log("Retrieved raw stats:",t);let m=t.gamesPlayed||0,y=t.gamesWon||0,n=t.gamesLost||0,c=t.totalWinTime||0,b=t.totalTimePlayed||0,f=y>0?Math.round(c/y):0,o=m>0?Math.round(b/m):0,d=m>0?Math.round(y/m*100):0,p=Array.isArray(t.recentGames)?t.recentGames:await D(s,5),I={userId:t.rawUserId||s,userName:t.userName||s,userImage:t.userImage||null,totalGames:m,wins:y,losses:n,winRate:d,fastestWin:t.fastestWin||null,averageWinTime:f,averageGameTime:o,bombsExploded:t.totalBombsExploded||0,noFlagWins:t.noFlagWins||0,timePlayed:b,totalCellsRevealed:t.totalCellsRevealed||0,gameRestarts:t.totalGameRestarts||0,abandonedGames:t.gamesAbandoned||0,restartedGames:t.gamesRestarted||0,totalFlagsUsed:t.totalFlagsPlaced||0,recentGames:p};return console.log("Transformed stats:",I),{statusCode:200,headers:u,body:JSON.stringify(I)}}return console.log("No stats found for user:",s),{statusCode:200,headers:u,body:JSON.stringify({userId:s,userName:s,userImage:null,totalGames:0,wins:0,losses:0,winRate:0,bombsExploded:0,noFlagWins:0,timePlayed:0,averageGameTime:0,totalCellsRevealed:0,gameRestarts:0,abandonedGames:0,restartedGames:0,totalFlagsUsed:0,averageWinTime:0,fastestWin:null,recentGames:await D(s,5)})}}catch(a){return console.error(`Error in getUserStats for ${s}:`,a),{statusCode:500,headers:u,body:JSON.stringify({message:"Error fetching user stats",error:a instanceof Error?a.message:String(a)})}}}async function D(s,a=5){try{let e=`USER#${s}`,i={TableName:w,KeyConditionExpression:"userId = :userId AND begins_with(#ts, :datePrefix)",ExpressionAttributeValues:{":userId":e,":datePrefix":"DATE#"},ExpressionAttributeNames:{"#ts":"timestamp"},ScanIndexForward:!1,Limit:a};return((await E.send(new l.QueryCommand(i))).Items||[]).map(m=>({...m,userId:m.rawUserId||(m.userId.startsWith("USER#")?m.userId.substring(5):m.userId)}))}catch(e){return console.error(`Error fetching recent games for user ${s}:`,e),[]}}async function ne(s,a=5){try{let e=[],i={TableName:w,KeyConditionExpression:"userId = :best AND #ts = :sk",ExpressionAttributeValues:{":best":"BEST",":sk":`BEST#${s}`},ExpressionAttributeNames:{"#ts":"timestamp"}},t=await E.send(new l.QueryCommand(i)),m=t.Items&&t.Items.length>0?t.Items[0]:null;m&&m.time>0&&e.push({...m,userId:m.rawUserId||s,status:"success",date:m.date||new Date().toISOString()});let y=`USER#${s}`,n={TableName:w,KeyConditionExpression:"userId = :userId AND begins_with(#ts, :datePrefix)",ExpressionAttributeValues:{":userId":y,":datePrefix":"DATE#"},ExpressionAttributeNames:{"#ts":"timestamp"}},o=((await E.send(new l.QueryCommand(n))).Items||[]).map(r=>({...r,userId:r.rawUserId||(r.userId.startsWith("USER#")?r.userId.substring(5):r.userId),date:r.date||(r.timestamp.startsWith("DATE#")?r.timestamp.substring(5):r.timestamp),displayTimestamp:r.timestamp.startsWith("DATE#")?r.timestamp.substring(5):r.timestamp})).filter(r=>{let g=r.time&&r.time>0||r.successTime&&r.successTime>0||r.winTime&&r.winTime>0;return r.status==="success"&&g}).map(r=>({...r,time:r.time||r.successTime||r.winTime||0,date:r.date||new Date(r.displayTimestamp).toISOString()}));e.push(...o);let d=[],p=new Set;for(let r of e){let g=`${r.time}-${r.date}`;p.has(g)||(p.add(g),d.push(r))}let I=d.sort((r,g)=>r.time-g.time).slice(0,a);return console.log(`Found ${I.length} best games for user ${s}`),{statusCode:200,headers:u,body:JSON.stringify(I)}}catch(e){return console.error(`Error fetching best games for user ${s}:`,e),{statusCode:500,headers:u,body:JSON.stringify({message:"Error fetching best games",error:e instanceof Error?e.message:String(e)})}}}async function oe(s){let{userId:a,userName:e,userImage:i,status:t,timePlayed:m,cellsRevealed:y,usedFlags:n,bombsExploded:c,noFlagWin:b,gameTime:f,gameRestarts:o}=s;console.log("Starting updateUserStats with params:",s);let d=typeof m=="number"?m:0,p=typeof y=="number"?y:0,I=typeof n=="number"?n:0,r=typeof c=="number"?c:0,g=!!b,T=typeof f=="number"?f:0,W=typeof o=="number"?o:0,N=`STAT#${a}`,h="STAT",S=await E.send(new l.GetCommand({TableName:w,Key:{userId:N,timestamp:h}})),G=Math.floor(Date.now()/1e3)+365*24*60*60,A=new Date().toISOString(),R=await D(a,100),P=R.reduce((x,F)=>{let q=F.status;return x[q]=(x[q]||0)+1,x},{}),B=Object.values(P).reduce((x,F)=>x+F,0),_=P.success||0,J=P.defeat||0,K=P.abandoned||0,v=P.restarted||0;if(!S.Item){console.log("No existing stats found, creating new stats entity");let x={userId:N,timestamp:h,rawUserId:a,userName:e||a,userImage:i||null,gamesPlayed:B,gamesWon:_,gamesLost:J,gamesAbandoned:K,gamesRestarted:v,totalTimePlayed:d,totalCellsRevealed:p,totalFlagsPlaced:I,totalBombsExploded:r,noFlagWins:t==="success"&&g?1:0,fastestWin:t==="success"&&T>0?T:null,totalWinTime:t==="success"&&T>0?T:0,totalGameRestarts:W,lastUpdated:A,ttl:G,recentGames:R.slice(0,5)};console.log("Creating new stats entity:",x),await E.send(new l.PutCommand({TableName:w,Item:x}));return}let U=S.Item;console.log("Found existing stats:",U);let C=U.fastestWin||null;t==="success"&&T>0?!C||T<C?C=T:C=U.fastestWin:C=U.fastestWin||null;let z=R.slice(0,5),$={TableName:w,Key:{userId:N,timestamp:h},UpdateExpression:`SET ${["gamesPlayed = :totalGames","gamesWon = :wins","gamesLost = :losses","gamesAbandoned = :abandoned","gamesRestarted = :restarted","totalTimePlayed = if_not_exists(totalTimePlayed, :zero) + :timePlayed","totalCellsRevealed = if_not_exists(totalCellsRevealed, :zero) + :cellsRevealed","totalFlagsPlaced = if_not_exists(totalFlagsPlaced, :zero) + :usedFlags","totalBombsExploded = if_not_exists(totalBombsExploded, :zero) + :bombsExploded","noFlagWins = if_not_exists(noFlagWins, :zero) + :noFlagWin","totalWinTime = if_not_exists(totalWinTime, :zero) + :winTime","totalGameRestarts = if_not_exists(totalGameRestarts, :zero) + :gameRestarts","fastestWin = :fastestWin","userName = :userName","userImage = :userImage","lastUpdated = :now","ttl = :ttl","recentGames = :recentGames"].join(", ")}`,ExpressionAttributeValues:{":totalGames":B,":wins":_,":losses":J,":abandoned":K,":restarted":v,":zero":0,":timePlayed":d,":cellsRevealed":p,":usedFlags":I,":bombsExploded":r,":noFlagWin":t==="success"&&g?1:0,":winTime":t==="success"&&T>0?T:0,":gameRestarts":W,":fastestWin":C,":userName":e||a,":userImage":i||null,":now":A,":ttl":G,":recentGames":z}};console.log("Updating stats with params:",$),await E.send(new l.UpdateCommand($));let L=await E.send(new l.GetCommand({TableName:w,Key:{userId:N,timestamp:h}}));console.log("Updated stats:",L.Item)}0&&(module.exports={handler});
