"use strict";var O=Object.defineProperty;var L=Object.getOwnPropertyDescriptor;var V=Object.getOwnPropertyNames;var k=Object.prototype.hasOwnProperty;var _=(t,a)=>{for(var e in a)O(t,e,{get:a[e],enumerable:!0})},z=(t,a,e,i)=>{if(a&&typeof a=="object"||typeof a=="function")for(let s of V(a))!k.call(t,s)&&s!==e&&O(t,s,{get:()=>a[s],enumerable:!(i=L(a,s))||i.enumerable});return t};var X=t=>z(O({},"__esModule",{value:!0}),t);var re={};_(re,{handler:()=>H});module.exports=X(re);var K=require("@aws-sdk/client-dynamodb"),l=require("@aws-sdk/lib-dynamodb"),j=new K.DynamoDBClient({}),S=l.DynamoDBDocumentClient.from(j),T=process.env.TABLE_NAME,ie=process.env.STATUS_TIME_INDEX,u={"Content-Type":"application/json","Access-Control-Allow-Origin":"*","Access-Control-Allow-Methods":"GET, POST, OPTIONS","Access-Control-Allow-Headers":"Content-Type,Authorization"},H=async t=>{if(t.httpMethod==="OPTIONS")return{statusCode:200,headers:u,body:JSON.stringify({message:"CORS enabled"})};try{let a=t.path.toLowerCase();if(a.includes("/leaderboard")){if(a.includes("/context/")){let e=t.pathParameters?.userId;return e?await ee(e):{statusCode:400,headers:u,body:JSON.stringify({message:"User ID is required"})}}return await Z(t)}if(a.includes("/stats/")){let e=t.pathParameters?.userId;return e?await se(e):{statusCode:400,headers:u,body:JSON.stringify({message:"User ID is required"})}}if(a.includes("/bestgames/")){let e=t.pathParameters?.userId;if(!e)return{statusCode:400,headers:u,body:JSON.stringify({message:"User ID is required"})};let i=t.queryStringParameters?.limit?parseInt(t.queryStringParameters.limit):5;return await te(e,i)}if(a.includes("/games")){if(t.httpMethod==="GET")return await Y(t);if(t.httpMethod==="POST")return await Q(t)}return{statusCode:404,headers:u,body:JSON.stringify({message:"Endpoint not found"})}}catch(a){return console.error("Error:",a),{statusCode:500,headers:u,body:JSON.stringify({message:"Internal server error",error:a instanceof Error?a.message:String(a)})}}};async function Q(t){if(!t.body)return{statusCode:400,headers:u,body:JSON.stringify({message:"Request body is required"})};let a=JSON.parse(t.body),{userId:e,status:i,time:s,successTime:m,winTime:g,userName:n,userImage:c,usedFlags:p,bombsExploded:w,noFlagWin:o,timePlayed:y,cellsRevealed:E,gameRestarts:P}=a;if(!e||!i)return{statusCode:400,headers:u,body:JSON.stringify({message:"userId and status are required"})};let r=new Date().toISOString(),I=Number(s||m||g||0),N=Math.floor(Date.now()/1e3)+7*24*60*60,A=`USER#${e}`,C=`DATE#${r}`;console.log("Saving game with data:",{userId:e,status:i,gameTime:I,timePlayed:y,usedFlags:p,bombsExploded:w,noFlagWin:o,cellsRevealed:E,gameRestarts:P});let W={userId:A,timestamp:C,rawUserId:e,status:i,time:I,date:r,ttl:N,userName:n||e,userImage:c||null,usedFlags:typeof p=="number"?p:0,bombsExploded:typeof w=="number"?w:0,noFlagWin:o===!0,timePlayed:typeof y=="number"?y:I,cellsRevealed:typeof E=="number"?E:0,gameRestarts:typeof P=="number"?P:0};await S.send(new l.PutCommand({TableName:T,Item:W}));try{let b=await D(e,100),R=b.reduce((d,f)=>{let J=f.status;return d[J]=(d[J]||0)+1,d},{}),x=b.reduce((d,f)=>d+(typeof f.timePlayed=="number"?f.timePlayed:0),0),h=b.reduce((d,f)=>d+(typeof f.cellsRevealed=="number"?f.cellsRevealed:0),0),G=b.reduce((d,f)=>d+(typeof f.usedFlags=="number"?f.usedFlags:0),0),U=b.reduce((d,f)=>d+(typeof f.bombsExploded=="number"?f.bombsExploded:0),0),v=b.reduce((d,f)=>d+(typeof f.gameRestarts=="number"?f.gameRestarts:0),0),M=b.filter(d=>d.status==="success"&&d.noFlagWin===!0).length,F=b.filter(d=>d.status==="success"&&typeof d.time=="number"&&d.time>0),$=F.length>0?Math.min(...F.map(d=>d.time)):null,q=F.reduce((d,f)=>d+(f.time||0),0),B={userId:e,userName:n||e,userImage:c||null,status:i,timePlayed:x,cellsRevealed:h,usedFlags:G,bombsExploded:U,noFlagWin:M>0,gameTime:$||0,gameRestarts:v,totalGames:b.length,gamesWon:R.success||0,gamesLost:R.defeat||0,gamesAbandoned:R.abandoned||0,gamesRestarted:R.restarted||0,totalWinTime:q};console.log("Updating stats with params:",B),await ae(B)}catch(b){console.error("Error updating user stats:",b)}if(i==="success"&&I>0)try{let b="BEST",R=`BEST#${e}`,x=await S.send(new l.QueryCommand({TableName:T,KeyConditionExpression:"userId = :pk AND #ts = :sk",ExpressionAttributeValues:{":pk":b,":sk":R},ExpressionAttributeNames:{"#ts":"timestamp"}})),h=x.Items&&x.Items.length>0?x.Items[0]:null;if(!h||I<h.time){let G={userId:b,timestamp:R,rawUserId:e,time:I,date:r,userName:n||e,userImage:c||null,usedFlags:typeof p=="number"?p:0,noFlagWin:o===!0,timePlayed:typeof y=="number"?y:I,cellsRevealed:typeof E=="number"?E:0,gameRestarts:typeof P=="number"?P:0};await S.send(new l.PutCommand({TableName:T,Item:G}))}}catch(b){console.error("Error checking/updating best time:",b)}return{statusCode:200,headers:u,body:JSON.stringify({message:"Game saved successfully"})}}async function Y(t){let a=t.queryStringParameters?.userId,e=t.queryStringParameters?.status,i=t.queryStringParameters?.limit?parseInt(t.queryStringParameters.limit):100;try{if(a){let n=`USER#${a}`,c={TableName:T,KeyConditionExpression:"userId = :userId AND begins_with(#ts, :datePrefix)",ExpressionAttributeValues:{":userId":n,":datePrefix":"DATE#"},ExpressionAttributeNames:{"#ts":"timestamp"},ScanIndexForward:!1,Limit:e==="success"?void 0:i};e&&(c.FilterExpression="#st = :status",c.ExpressionAttributeValues[":status"]=e,c.ExpressionAttributeNames["#st"]="status");let w=((await S.send(new l.QueryCommand(c))).Items||[]).map(o=>({...o,userId:o.rawUserId||(o.userId?.startsWith("USER#")?o.userId.substring(5):o.userId||a),displayTimestamp:o.timestamp?.startsWith("DATE#")?o.timestamp.substring(5):o.timestamp}));return e==="success"&&(w=w.sort((o,y)=>(o.time||0)-(y.time||0)).slice(0,i)),{statusCode:200,headers:u,body:JSON.stringify(w)}}let s={TableName:T,FilterExpression:"begins_with(#ts, :datePrefix)",ExpressionAttributeValues:{":datePrefix":"DATE#"},ExpressionAttributeNames:{"#ts":"timestamp"},Limit:i};e&&(s.FilterExpression+=" AND #st = :status",s.ExpressionAttributeValues[":status"]=e,s.ExpressionAttributeNames["#st"]="status");let g=((await S.send(new l.ScanCommand(s))).Items||[]).map(n=>({...n,userId:n.rawUserId||(n.userId?.startsWith("USER#")?n.userId.substring(5):n.userId),displayTimestamp:n.timestamp?.startsWith("DATE#")?n.timestamp.substring(5):n.timestamp}));return{statusCode:200,headers:u,body:JSON.stringify(g)}}catch(s){return console.error("Error fetching games:",s),{statusCode:500,headers:u,body:JSON.stringify({message:"Error fetching games",error:s instanceof Error?s.message:String(s)})}}}async function Z(t){let a=t.queryStringParameters?.limit?parseInt(t.queryStringParameters.limit):10;try{let e={TableName:T,KeyConditionExpression:"userId = :best",ExpressionAttributeValues:{":best":"BEST"}},g=((await S.send(new l.QueryCommand(e))).Items||[]).sort((n,c)=>n.time-c.time).slice(0,a).map((n,c)=>{let p=n.rawUserId||(n.timestamp.startsWith("BEST#")?n.timestamp.substring(5):"");return{rank:c+1,userId:p,userName:n.userName||p,userImage:n.userImage||null,time:n.time,date:n.date}});return{statusCode:200,headers:u,body:JSON.stringify(g)}}catch(e){return console.error("Error fetching leaderboard:",e),{statusCode:500,headers:u,body:JSON.stringify({message:"Error fetching leaderboard",error:e instanceof Error?e.message:String(e)})}}}async function ee(t){try{let e={TableName:T,KeyConditionExpression:"userId = :best",ExpressionAttributeValues:{":best":"BEST"}},g=((await S.send(new l.QueryCommand(e))).Items||[]).sort((o,y)=>o.time-y.time).map((o,y)=>{let E=o.rawUserId||(o.timestamp.startsWith("BEST#")?o.timestamp.substring(5):"");return{rank:y+1,userId:E,userName:o.userName||E,userImage:o.userImage||null,time:o.time,date:o.date}}),n=g.findIndex(o=>o.userId===t);if(n===-1)return{statusCode:200,headers:u,body:JSON.stringify([])};let c=Math.max(0,n-2),p=Math.min(g.length-1,n+2),w=g.slice(c,p+1);return{statusCode:200,headers:u,body:JSON.stringify(w)}}catch(e){return console.error("Error fetching user leaderboard context:",e),{statusCode:500,headers:u,body:JSON.stringify({message:"Error fetching user leaderboard context",error:e instanceof Error?e.message:String(e)})}}}async function se(t){try{let a=`STAT#${t}`,e="STAT",i=await S.send(new l.GetCommand({TableName:T,Key:{userId:a,timestamp:e}}));if(i.Item){let s=i.Item;console.log("Retrieved raw stats:",s);let m=s.gamesPlayed||0,g=s.gamesWon||0,n=s.gamesLost||0,c=s.totalWinTime||0,p=s.totalTimePlayed||0,w=g>0?Math.round(c/g):0,o=m>0?Math.round(p/m):0,y=m>0?Math.round(g/m*100):0,E=Array.isArray(s.recentGames)?s.recentGames:await D(t,5),P={userId:s.rawUserId||t,userName:s.userName||t,userImage:s.userImage||null,totalGames:m,wins:g,losses:n,winRate:y,fastestWin:s.fastestWin||null,averageWinTime:w,averageGameTime:o,bombsExploded:s.totalBombsExploded||0,noFlagWins:s.noFlagWins||0,timePlayed:p,totalCellsRevealed:s.totalCellsRevealed||0,gameRestarts:s.totalGameRestarts||0,abandonedGames:s.gamesAbandoned||0,restartedGames:s.gamesRestarted||0,totalFlagsUsed:s.totalFlagsPlaced||0,recentGames:E};return console.log("Transformed stats:",P),{statusCode:200,headers:u,body:JSON.stringify(P)}}return console.log("No stats found for user:",t),{statusCode:200,headers:u,body:JSON.stringify({userId:t,userName:t,userImage:null,totalGames:0,wins:0,losses:0,winRate:0,bombsExploded:0,noFlagWins:0,timePlayed:0,averageGameTime:0,totalCellsRevealed:0,gameRestarts:0,abandonedGames:0,restartedGames:0,totalFlagsUsed:0,averageWinTime:0,fastestWin:null,recentGames:await D(t,5)})}}catch(a){return console.error(`Error in getUserStats for ${t}:`,a),{statusCode:500,headers:u,body:JSON.stringify({message:"Error fetching user stats",error:a instanceof Error?a.message:String(a)})}}}async function D(t,a=5){try{let e=`USER#${t}`,i={TableName:T,KeyConditionExpression:"userId = :userId AND begins_with(#ts, :datePrefix)",ExpressionAttributeValues:{":userId":e,":datePrefix":"DATE#"},ExpressionAttributeNames:{"#ts":"timestamp"},ScanIndexForward:!1,Limit:a};return((await S.send(new l.QueryCommand(i))).Items||[]).map(m=>({...m,userId:m.rawUserId||(m.userId.startsWith("USER#")?m.userId.substring(5):m.userId)}))}catch(e){return console.error(`Error fetching recent games for user ${t}:`,e),[]}}async function te(t,a=5){try{let e=[],i={TableName:T,KeyConditionExpression:"userId = :best AND #ts = :sk",ExpressionAttributeValues:{":best":"BEST",":sk":`BEST#${t}`},ExpressionAttributeNames:{"#ts":"timestamp"}},s=await S.send(new l.QueryCommand(i)),m=s.Items&&s.Items.length>0?s.Items[0]:null;m&&m.time>0&&e.push({...m,userId:m.rawUserId||t,status:"success",date:m.date||new Date().toISOString()});let g=`USER#${t}`,n={TableName:T,KeyConditionExpression:"userId = :userId AND begins_with(#ts, :datePrefix)",ExpressionAttributeValues:{":userId":g,":datePrefix":"DATE#"},ExpressionAttributeNames:{"#ts":"timestamp"}},o=((await S.send(new l.QueryCommand(n))).Items||[]).map(r=>({...r,userId:r.rawUserId||(r.userId.startsWith("USER#")?r.userId.substring(5):r.userId),date:r.date||(r.timestamp.startsWith("DATE#")?r.timestamp.substring(5):r.timestamp),displayTimestamp:r.timestamp.startsWith("DATE#")?r.timestamp.substring(5):r.timestamp})).filter(r=>{let I=r.time&&r.time>0||r.successTime&&r.successTime>0||r.winTime&&r.winTime>0;return r.status==="success"&&I}).map(r=>({...r,time:r.time||r.successTime||r.winTime||0,date:r.date||new Date(r.displayTimestamp).toISOString()}));e.push(...o);let y=[],E=new Set;for(let r of e){let I=`${r.time}-${r.date}`;E.has(I)||(E.add(I),y.push(r))}let P=y.sort((r,I)=>r.time-I.time).slice(0,a);return console.log(`Found ${P.length} best games for user ${t}`),{statusCode:200,headers:u,body:JSON.stringify(P)}}catch(e){return console.error(`Error fetching best games for user ${t}:`,e),{statusCode:500,headers:u,body:JSON.stringify({message:"Error fetching best games",error:e instanceof Error?e.message:String(e)})}}}async function ae(t){let{userId:a,userName:e,userImage:i,status:s,timePlayed:m,cellsRevealed:g,usedFlags:n,bombsExploded:c,noFlagWin:p,gameTime:w,gameRestarts:o}=t;console.log("Starting updateUserStats with params:",t);let y=typeof m=="number"?m:0,E=typeof g=="number"?g:0,P=typeof n=="number"?n:0,r=typeof c=="number"?c:0,I=typeof o=="number"?o:0,N=typeof w=="number"?w:0,A=`STAT#${a}`,C="STAT",W=await S.send(new l.GetCommand({TableName:T,Key:{userId:A,timestamp:C}}));console.log("Retrieved raw stats:",W.Item);let b=Math.floor(Date.now()/1e3)+365*24*60*60;if(!W.Item){let U={userId:A,timestamp:C,rawUserId:a,userName:e||a,userImage:i||null,gamesPlayed:1,gamesWon:s==="success"?1:0,gamesLost:s==="defeat"?1:0,gamesAbandoned:s==="abandoned"?1:0,gamesRestarted:s==="restarted"?1:0,totalTimePlayed:y,totalCellsRevealed:E,totalFlagsPlaced:P,totalBombsExploded:r,totalGameRestarts:I,noFlagWins:s==="success"&&p?1:0,totalWinTime:s==="success"?N:0,fastestWin:s==="success"?N:null,lastUpdated:new Date().toISOString(),ttl:b};await S.send(new l.PutCommand({TableName:T,Item:U}));return}let x=W.Item.fastestWin;s==="success"&&N>0&&(!x||N<x)&&(x=N);let h={TableName:T,Key:{userId:A,timestamp:C},UpdateExpression:`
      SET gamesPlayed = gamesPlayed + :one,
          gamesWon = gamesWon + :win,
          gamesLost = gamesLost + :loss,
          gamesAbandoned = gamesAbandoned + :abandoned,
          gamesRestarted = gamesRestarted + :restarted,
          totalTimePlayed = totalTimePlayed + :timePlayed,
          totalCellsRevealed = totalCellsRevealed + :cellsRevealed,
          totalFlagsPlaced = totalFlagsPlaced + :usedFlags,
          totalBombsExploded = totalBombsExploded + :bombsExploded,
          totalGameRestarts = totalGameRestarts + :gameRestarts,
          noFlagWins = noFlagWins + :noFlagWin,
          totalWinTime = totalWinTime + :winTime,
          fastestWin = :fastestWin,
          userName = :userName,
          userImage = :userImage,
          lastUpdated = :now,
          ttl = :ttl
    `,ExpressionAttributeValues:{":one":1,":win":s==="success"?1:0,":loss":s==="defeat"?1:0,":abandoned":s==="abandoned"?1:0,":restarted":s==="restarted"?1:0,":timePlayed":y,":cellsRevealed":E,":usedFlags":P,":bombsExploded":r,":gameRestarts":I,":noFlagWin":s==="success"&&p?1:0,":winTime":s==="success"?N:0,":fastestWin":x,":userName":e||a,":userImage":i||null,":now":new Date().toISOString(),":ttl":b}};console.log("Updating stats with params:",h),await S.send(new l.UpdateCommand(h));let G=await S.send(new l.GetCommand({TableName:T,Key:{userId:A,timestamp:C}}));console.log("Updated stats:",G.Item)}0&&(module.exports={handler});
