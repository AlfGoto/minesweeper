"use strict";var C=Object.defineProperty;var D=Object.getOwnPropertyDescriptor;var G=Object.getOwnPropertyNames;var U=Object.prototype.hasOwnProperty;var B=(s,a)=>{for(var e in a)C(s,e,{get:a[e],enumerable:!0})},M=(s,a,e,l)=>{if(a&&typeof a=="object"||typeof a=="function")for(let i of G(a))!U.call(s,i)&&i!==e&&C(s,i,{get:()=>a[i],enumerable:!(l=D(a,i))||l.enumerable});return s};var F=s=>M(C({},"__esModule",{value:!0}),s);var k={};B(k,{handler:()=>W});module.exports=F(k);var O=require("@aws-sdk/client-dynamodb"),m=require("@aws-sdk/lib-dynamodb"),J=new O.DynamoDBClient({}),g=m.DynamoDBDocumentClient.from(J),f=process.env.TABLE_NAME,z=process.env.STATUS_TIME_INDEX,d={"Content-Type":"application/json","Access-Control-Allow-Origin":"*","Access-Control-Allow-Methods":"GET, POST, OPTIONS","Access-Control-Allow-Headers":"Content-Type,Authorization"},W=async s=>{if(console.log("Event received:",JSON.stringify(s,null,2)),s.httpMethod==="OPTIONS")return{statusCode:200,headers:d,body:JSON.stringify({message:"CORS enabled"})};try{let a=s.path.toLowerCase();if(a.includes("/leaderboard")){if(a.includes("/context/")){let e=s.pathParameters?.userId;return e?await K(e):{statusCode:400,headers:d,body:JSON.stringify({message:"User ID is required"})}}return await q(s)}if(a.includes("/stats/")){let e=s.pathParameters?.userId;return e?await V(e):{statusCode:400,headers:d,body:JSON.stringify({message:"User ID is required"})}}if(a.includes("/games")){if(s.httpMethod==="GET")return await $(s);if(s.httpMethod==="POST")return await _(s)}return{statusCode:404,headers:d,body:JSON.stringify({message:"Endpoint not found"})}}catch(a){return console.error("Error:",a),{statusCode:500,headers:d,body:JSON.stringify({message:"Internal server error",error:a instanceof Error?a.message:String(a)})}}};async function _(s){if(!s.body)return{statusCode:400,headers:d,body:JSON.stringify({message:"Request body is required"})};let a=JSON.parse(s.body);console.log("Request body:",a);let{userId:e,status:l,time:i,successTime:S,winTime:c,userName:t,userImage:o,usedFlags:u,bombsExploded:b,noFlagWin:r,timePlayed:y}=a;if(!e||!l)return{statusCode:400,headers:d,body:JSON.stringify({message:"userId and status are required"})};let p=new Date().toISOString(),I=Number(i||S||c||0),T=Math.floor(Date.now()/1e3)+90*24*60*60,A=`USER#${e}`,h=`DATE#${p}`,x={userId:A,timestamp:h,rawUserId:e,status:l,time:I,date:p,ttl:T,userName:t||e,userImage:o||null,usedFlags:u!==void 0?u:null,bombsExploded:b!==void 0?b:null,noFlagWin:r!==void 0?r:null,timePlayed:y!==void 0?y:null};if(console.log("Storing game item:",x),await g.send(new m.PutCommand({TableName:f,Item:x})),l==="success"&&I>0)try{console.log(`Processing successful game for ${e} with time ${I}`);let E="BEST",w=`BEST#${e}`,N=await g.send(new m.QueryCommand({TableName:f,KeyConditionExpression:"userId = :pk AND timestamp = :sk",ExpressionAttributeValues:{":pk":E,":sk":w}})),P=N.Items&&N.Items.length>0?N.Items[0]:null;if(console.log(`Current best time for ${e}: ${P?P.time:"none"}`),!P||I<P.time){console.log(`Updating best time for ${e}: ${I} seconds (previous: ${P?.time||"none"})`);let n={userId:E,timestamp:w,rawUserId:e,time:I,date:p,ttl:Math.floor(Date.now()/1e3)+365*24*60*60,userName:t||e,userImage:o||null,usedFlags:u!==void 0?u:null,noFlagWin:r!==void 0?r:null,timePlayed:y!==void 0?y:null};await g.send(new m.PutCommand({TableName:f,Item:n})),console.log("Best time updated successfully")}}catch(E){console.error("Error checking/updating best time:",E)}return console.log("Game result stored successfully"),{statusCode:200,headers:d,body:JSON.stringify({message:"Game result stored successfully",item:x})}}async function $(s){let a=s.queryStringParameters?.userId,e=s.queryStringParameters?.status,l=s.queryStringParameters?.limit?parseInt(s.queryStringParameters.limit):100;if(a){let t=`USER#${a}`,o={TableName:f,KeyConditionExpression:"userId = :userId",ExpressionAttributeValues:{":userId":t},ScanIndexForward:!1,Limit:l};e?(o.FilterExpression="#st = :status AND begins_with(#ts, :datePrefix)",o.ExpressionAttributeValues[":status"]=e,o.ExpressionAttributeValues[":datePrefix"]="DATE#",o.ExpressionAttributeNames={"#ts":"timestamp","#st":"status"}):(o.FilterExpression="begins_with(#ts, :datePrefix)",o.ExpressionAttributeValues[":datePrefix"]="DATE#",o.ExpressionAttributeNames={"#ts":"timestamp"});let b=((await g.send(new m.QueryCommand(o))).Items||[]).map(r=>({...r,userId:r.rawUserId||(r.userId.startsWith("USER#")?r.userId.substring(5):r.userId),displayTimestamp:r.timestamp.startsWith("DATE#")?r.timestamp.substring(5):r.timestamp}));return{statusCode:200,headers:d,body:JSON.stringify(b)}}let i={TableName:f,FilterExpression:"begins_with(#ts, :datePrefix)",ExpressionAttributeValues:{":datePrefix":"DATE#"},ExpressionAttributeNames:{"#ts":"timestamp"},Limit:l};e&&(i.FilterExpression+=" AND #st = :status",i.ExpressionAttributeValues[":status"]=e,i.ExpressionAttributeNames["#st"]="status");let c=((await g.send(new m.ScanCommand(i))).Items||[]).map(t=>({...t,userId:t.rawUserId||(t.userId.startsWith("USER#")?t.userId.substring(5):t.userId),displayTimestamp:t.timestamp.startsWith("DATE#")?t.timestamp.substring(5):t.timestamp}));return{statusCode:200,headers:d,body:JSON.stringify(c)}}async function q(s){let a=s.queryStringParameters?.limit?parseInt(s.queryStringParameters.limit):10;try{console.log("Fetching leaderboard data from BEST partition...");let e={TableName:f,KeyConditionExpression:"userId = :best",ExpressionAttributeValues:{":best":"BEST"}},l=await g.send(new m.QueryCommand(e));console.log(`Found ${l.Items?.length||0} best time records`);let c=(l.Items||[]).sort((t,o)=>t.time-o.time).slice(0,a).map((t,o)=>{let u=t.rawUserId||(t.timestamp.startsWith("BEST#")?t.timestamp.substring(5):"");return{rank:o+1,userId:u,userName:t.userName||u,userImage:t.userImage||null,time:t.time,date:t.date}});return{statusCode:200,headers:d,body:JSON.stringify(c)}}catch(e){return console.error("Error fetching leaderboard:",e),{statusCode:500,headers:d,body:JSON.stringify({message:"Error fetching leaderboard",error:e instanceof Error?e.message:String(e)})}}}async function K(s){try{let e={TableName:f,KeyConditionExpression:"userId = :best",ExpressionAttributeValues:{":best":"BEST"}},c=((await g.send(new m.QueryCommand(e))).Items||[]).sort((r,y)=>r.time-y.time).map((r,y)=>{let p=r.rawUserId||(r.timestamp.startsWith("BEST#")?r.timestamp.substring(5):"");return{rank:y+1,userId:p,userName:r.userName||p,userImage:r.userImage||null,time:r.time,date:r.date}}),t=c.findIndex(r=>r.userId===s);if(t===-1)return{statusCode:200,headers:d,body:JSON.stringify([])};let o=Math.max(0,t-2),u=Math.min(c.length-1,t+2),b=c.slice(o,u+1);return{statusCode:200,headers:d,body:JSON.stringify(b)}}catch(e){return console.error("Error fetching user leaderboard context:",e),{statusCode:500,headers:d,body:JSON.stringify({message:"Error fetching user leaderboard context",error:e instanceof Error?e.message:String(e)})}}}async function V(s){let a=`USER#${s}`,e={TableName:f,KeyConditionExpression:"userId = :userId",ExpressionAttributeValues:{":userId":a}},i=(await g.send(new m.QueryCommand(e))).Items||[],S={TableName:f,KeyConditionExpression:"userId = :best AND timestamp = :sk",ExpressionAttributeValues:{":best":"BEST",":sk":`BEST#${s}`}},c=await g.send(new m.QueryCommand(S)),t=c.Items&&c.Items.length>0?c.Items[0]:null,o=0,u=0,b=0,r=t?t.time:Number.MAX_SAFE_INTEGER,y=0,p=0,I=t?.userName||s,T=t?.userImage||null,A=0,h=0,x=0,E=0,w=i.filter(n=>n.timestamp.startsWith("DATE#"));o=w.length,w.forEach(n=>{n.userName&&!I&&(I=n.userName),n.userImage&&!T&&(T=n.userImage),n.bombsExploded&&(A+=n.bombsExploded),n.status==="success"&&n.noFlagWin===!0&&h++,n.timePlayed&&typeof n.timePlayed=="number"&&(x+=n.timePlayed,E++),n.status==="success"?(u++,p+=n.time||0,t||(r=Math.min(r,n.time||Number.MAX_SAFE_INTEGER))):n.status==="defeat"&&b++}),y=u>0?Math.round(p/u):0;let N=E>0?Math.round(x/E):0;r===Number.MAX_SAFE_INTEGER&&(r=0);let P={userId:s,userName:I,userImage:T,totalGames:o,wins:u,losses:b,winRate:o>0?Math.round(u/o*100):0,fastestWin:r,averageWinTime:y,bombsExploded:A,noFlagWins:h,timePlayed:x,averageGameTime:N,recentGames:w.sort((n,R)=>R.timestamp.localeCompare(n.timestamp)).slice(0,5).map(n=>({...n,userId:n.rawUserId||s}))};return{statusCode:200,headers:d,body:JSON.stringify(P)}}0&&(module.exports={handler});
