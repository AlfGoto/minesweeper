"use strict";var G=Object.defineProperty;var O=Object.getOwnPropertyDescriptor;var D=Object.getOwnPropertyNames;var F=Object.prototype.hasOwnProperty;var _=(t,a)=>{for(var e in a)G(t,e,{get:a[e],enumerable:!0})},J=(t,a,e,d)=>{if(a&&typeof a=="object"||typeof a=="function")for(let s of D(a))!F.call(t,s)&&s!==e&&G(t,s,{get:()=>a[s],enumerable:!(d=O(a,s))||d.enumerable});return t};var B=t=>J(G({},"__esModule",{value:!0}),t);var j={};_(j,{handler:()=>z});module.exports=B(j);var U=require("@aws-sdk/client-dynamodb"),g=require("@aws-sdk/lib-dynamodb"),K=new U.DynamoDBClient({}),I=g.DynamoDBDocumentClient.from(K),E=process.env.TABLE_NAME,Q=process.env.STATUS_TIME_INDEX,l={"Content-Type":"application/json","Access-Control-Allow-Origin":"*","Access-Control-Allow-Methods":"GET, POST, OPTIONS","Access-Control-Allow-Headers":"Content-Type,Authorization"},z=async t=>{if(t.httpMethod==="OPTIONS")return{statusCode:200,headers:l,body:JSON.stringify({message:"CORS enabled"})};try{let a=t.path.toLowerCase();if(a.includes("/leaderboard")){if(a.includes("/context/")){let e=t.pathParameters?.userId;return e?await L(e):{statusCode:400,headers:l,body:JSON.stringify({message:"User ID is required"})}}return await q(t)}if(a.includes("/stats/")){let e=t.pathParameters?.userId;return e?await v(e):{statusCode:400,headers:l,body:JSON.stringify({message:"User ID is required"})}}if(a.includes("/bestgames/")){let e=t.pathParameters?.userId;if(!e)return{statusCode:400,headers:l,body:JSON.stringify({message:"User ID is required"})};let d=t.queryStringParameters?.limit?parseInt(t.queryStringParameters.limit):5;return await V(e,d)}if(a.includes("/games")){if(t.httpMethod==="GET")return await M(t);if(t.httpMethod==="POST")return await $(t)}return{statusCode:404,headers:l,body:JSON.stringify({message:"Endpoint not found"})}}catch(a){return console.error("Error:",a),{statusCode:500,headers:l,body:JSON.stringify({message:"Internal server error",error:a instanceof Error?a.message:String(a)})}}};async function $(t){if(!t.body)return{statusCode:400,headers:l,body:JSON.stringify({message:"Request body is required"})};let a=JSON.parse(t.body),{userId:e,status:d,time:s,successTime:i,winTime:c,userName:n,userImage:u,usedFlags:f,bombsExploded:m,noFlagWin:o,timePlayed:y,cellsRevealed:p,gameRestarts:S}=a;if(!e||!d)return{statusCode:400,headers:l,body:JSON.stringify({message:"userId and status are required"})};let r=new Date().toISOString(),b=Number(s||i||c||0),T=Math.floor(Date.now()/1e3)+90*24*60*60,A=`USER#${e}`,h=`DATE#${r}`,R={userId:A,timestamp:h,rawUserId:e,status:d,time:b,date:r,ttl:T,userName:n||e,userImage:u||null,usedFlags:f!==void 0?f:null,bombsExploded:m!==void 0?m:null,noFlagWin:o!==void 0?o:null,timePlayed:y!==void 0?y:null,cellsRevealed:p!==void 0?p:null,gameRestarts:S!==void 0?S:null};await I.send(new g.PutCommand({TableName:E,Item:R}));try{await k({userId:e,userName:n||e,userImage:u||null,status:d,timePlayed:y!==void 0?y:b,cellsRevealed:p!==void 0?p:0,usedFlags:f!==void 0?f:0,bombsExploded:m!==void 0?m:0,noFlagWin:o===!0,gameTime:b>0?b:0,gameRestarts:S!==void 0?S:0})}catch(w){console.error("Error updating user stats:",w)}if(d==="success"&&b>0)try{let w="BEST",x=`BEST#${e}`,P=await I.send(new g.QueryCommand({TableName:E,KeyConditionExpression:"userId = :pk AND #ts = :sk",ExpressionAttributeValues:{":pk":w,":sk":x},ExpressionAttributeNames:{"#ts":"timestamp"}})),N=P.Items&&P.Items.length>0?P.Items[0]:null;if(!N||b<N.time){let C={userId:w,timestamp:x,rawUserId:e,time:b,date:r,ttl:Math.floor(Date.now()/1e3)+31536e3,userName:n||e,userImage:u||null,usedFlags:f!==void 0?f:null,noFlagWin:o!==void 0?o:null,timePlayed:y!==void 0?y:null,cellsRevealed:p!==void 0?p:null,gameRestarts:S!==void 0?S:null};await I.send(new g.PutCommand({TableName:E,Item:C}))}}catch(w){console.error("Error checking/updating best time:",w)}return{statusCode:200,headers:l,body:JSON.stringify({message:"Game saved successfully"})}}async function M(t){let a=t.queryStringParameters?.userId,e=t.queryStringParameters?.status,d=t.queryStringParameters?.limit?parseInt(t.queryStringParameters.limit):100;try{if(a){let n=`USER#${a}`,u={TableName:E,KeyConditionExpression:"userId = :userId AND begins_with(#ts, :datePrefix)",ExpressionAttributeValues:{":userId":n,":datePrefix":"DATE#"},ExpressionAttributeNames:{"#ts":"timestamp"},ScanIndexForward:!1,Limit:e==="success"?void 0:d};e&&(u.FilterExpression="#st = :status",u.ExpressionAttributeValues[":status"]=e,u.ExpressionAttributeNames["#st"]="status");let m=((await I.send(new g.QueryCommand(u))).Items||[]).map(o=>({...o,userId:o.rawUserId||(o.userId.startsWith("USER#")?o.userId.substring(5):o.userId),displayTimestamp:o.timestamp.startsWith("DATE#")?o.timestamp.substring(5):o.timestamp}));return e==="success"&&(m=m.sort((o,y)=>o.time-y.time).slice(0,d)),{statusCode:200,headers:l,body:JSON.stringify(m)}}let s={TableName:E,FilterExpression:"begins_with(#ts, :datePrefix)",ExpressionAttributeValues:{":datePrefix":"DATE#"},ExpressionAttributeNames:{"#ts":"timestamp"},Limit:d};e&&(s.FilterExpression+=" AND #st = :status",s.ExpressionAttributeValues[":status"]=e,s.ExpressionAttributeNames["#st"]="status");let c=((await I.send(new g.ScanCommand(s))).Items||[]).map(n=>({...n,userId:n.rawUserId||(n.userId.startsWith("USER#")?n.userId.substring(5):n.userId),displayTimestamp:n.timestamp.startsWith("DATE#")?n.timestamp.substring(5):n.timestamp}));return{statusCode:200,headers:l,body:JSON.stringify(c)}}catch(s){return console.error("Error fetching games:",s),{statusCode:500,headers:l,body:JSON.stringify({message:"Error fetching games",error:s instanceof Error?s.message:String(s)})}}}async function q(t){let a=t.queryStringParameters?.limit?parseInt(t.queryStringParameters.limit):10;try{let e={TableName:E,KeyConditionExpression:"userId = :best",ExpressionAttributeValues:{":best":"BEST"}},c=((await I.send(new g.QueryCommand(e))).Items||[]).sort((n,u)=>n.time-u.time).slice(0,a).map((n,u)=>{let f=n.rawUserId||(n.timestamp.startsWith("BEST#")?n.timestamp.substring(5):"");return{rank:u+1,userId:f,userName:n.userName||f,userImage:n.userImage||null,time:n.time,date:n.date}});return{statusCode:200,headers:l,body:JSON.stringify(c)}}catch(e){return console.error("Error fetching leaderboard:",e),{statusCode:500,headers:l,body:JSON.stringify({message:"Error fetching leaderboard",error:e instanceof Error?e.message:String(e)})}}}async function L(t){try{let e={TableName:E,KeyConditionExpression:"userId = :best",ExpressionAttributeValues:{":best":"BEST"}},c=((await I.send(new g.QueryCommand(e))).Items||[]).sort((o,y)=>o.time-y.time).map((o,y)=>{let p=o.rawUserId||(o.timestamp.startsWith("BEST#")?o.timestamp.substring(5):"");return{rank:y+1,userId:p,userName:o.userName||p,userImage:o.userImage||null,time:o.time,date:o.date}}),n=c.findIndex(o=>o.userId===t);if(n===-1)return{statusCode:200,headers:l,body:JSON.stringify([])};let u=Math.max(0,n-2),f=Math.min(c.length-1,n+2),m=c.slice(u,f+1);return{statusCode:200,headers:l,body:JSON.stringify(m)}}catch(e){return console.error("Error fetching user leaderboard context:",e),{statusCode:500,headers:l,body:JSON.stringify({message:"Error fetching user leaderboard context",error:e instanceof Error?e.message:String(e)})}}}async function v(t){try{let a=`STAT#${t}`,e="STAT",d=await I.send(new g.GetCommand({TableName:E,Key:{userId:a,timestamp:e}}));if(d.Item){let s=d.Item,i=s.gamesPlayed||0,c=s.gamesWon||0,n=s.totalWinTime||0,u=s.totalTimePlayed||0,f=c>0?Math.round(n/c):0,m=i>0?Math.round(u/i):0,o={...s,userId:s.rawUserId||t,totalGames:s.gamesPlayed||0,totalFlagsUsed:s.totalFlagsPlaced||0,averageWinTime:f,averageGameTime:m,wins:s.gamesWon||0,losses:s.gamesLost||0,winRate:i>0?Math.round(c/i*100):0,bombsExploded:s.totalBombsExploded||0,noFlagWins:s.noFlagWins||0,timePlayed:s.totalTimePlayed||0,totalCellsRevealed:s.totalCellsRevealed||0,gameRestarts:s.totalGameRestarts||0,abandonedGames:s.gamesAbandoned||0,restartedGames:s.gamesRestarted||0,recentGames:s.recentGames||await W(t,5)};return{statusCode:200,headers:l,body:JSON.stringify(o)}}return{statusCode:200,headers:l,body:JSON.stringify({userId:t,totalGames:0,wins:0,losses:0,winRate:0,bombsExploded:0,noFlagWins:0,timePlayed:0,averageGameTime:0,totalCellsRevealed:0,gameRestarts:0,abandonedGames:0,restartedGames:0,totalFlagsUsed:0,averageWinTime:0,fastestWin:null,recentGames:await W(t,5)})}}catch(a){return console.error(`Error in getUserStats for ${t}:`,a),{statusCode:500,headers:l,body:JSON.stringify({message:"Error fetching user stats",error:a instanceof Error?a.message:String(a)})}}}async function W(t,a=5){try{let e=`USER#${t}`,d={TableName:E,KeyConditionExpression:"userId = :userId AND begins_with(#ts, :datePrefix)",ExpressionAttributeValues:{":userId":e,":datePrefix":"DATE#"},ExpressionAttributeNames:{"#ts":"timestamp"},ScanIndexForward:!1,Limit:a};return((await I.send(new g.QueryCommand(d))).Items||[]).map(i=>({...i,userId:i.rawUserId||(i.userId.startsWith("USER#")?i.userId.substring(5):i.userId)}))}catch(e){return console.error(`Error fetching recent games for user ${t}:`,e),[]}}async function V(t,a=5){try{let e=[],d={TableName:E,KeyConditionExpression:"userId = :best AND #ts = :sk",ExpressionAttributeValues:{":best":"BEST",":sk":`BEST#${t}`},ExpressionAttributeNames:{"#ts":"timestamp"}},s=await I.send(new g.QueryCommand(d)),i=s.Items&&s.Items.length>0?s.Items[0]:null;i&&i.time>0&&e.push({...i,userId:i.rawUserId||t,status:"success",date:i.date||new Date().toISOString()});let c=`USER#${t}`,n={TableName:E,KeyConditionExpression:"userId = :userId AND begins_with(#ts, :datePrefix)",ExpressionAttributeValues:{":userId":c,":datePrefix":"DATE#"},ExpressionAttributeNames:{"#ts":"timestamp"}},o=((await I.send(new g.QueryCommand(n))).Items||[]).map(r=>({...r,userId:r.rawUserId||(r.userId.startsWith("USER#")?r.userId.substring(5):r.userId),date:r.date||(r.timestamp.startsWith("DATE#")?r.timestamp.substring(5):r.timestamp),displayTimestamp:r.timestamp.startsWith("DATE#")?r.timestamp.substring(5):r.timestamp})).filter(r=>{let b=r.time&&r.time>0||r.successTime&&r.successTime>0||r.winTime&&r.winTime>0;return r.status==="success"&&b}).map(r=>({...r,time:r.time||r.successTime||r.winTime||0,date:r.date||new Date(r.displayTimestamp).toISOString()}));e.push(...o);let y=[],p=new Set;for(let r of e){let b=`${r.time}-${r.date}`;p.has(b)||(p.add(b),y.push(r))}let S=y.sort((r,b)=>r.time-b.time).slice(0,a);return console.log(`Found ${S.length} best games for user ${t}`),{statusCode:200,headers:l,body:JSON.stringify(S)}}catch(e){return console.error(`Error fetching best games for user ${t}:`,e),{statusCode:500,headers:l,body:JSON.stringify({message:"Error fetching best games",error:e instanceof Error?e.message:String(e)})}}}async function k(t){let{userId:a,userName:e,userImage:d,status:s,timePlayed:i,cellsRevealed:c,usedFlags:n,bombsExploded:u,noFlagWin:f,gameTime:m,gameRestarts:o}=t,y=`STAT#${a}`,p="STAT",S=await I.send(new g.GetCommand({TableName:E,Key:{userId:y,timestamp:p}})),r=Math.floor(Date.now()/1e3)+365*24*60*60;if(!S.Item){let C={userId:y,timestamp:p,rawUserId:a,userName:e,userImage:d,gamesPlayed:1,gamesWon:s==="success"?1:0,gamesLost:s==="defeat"?1:0,gamesAbandoned:s==="abandoned"?1:0,gamesRestarted:s==="restarted"?1:0,totalTimePlayed:i>0?i:0,totalCellsRevealed:c>0?c:0,totalFlagsPlaced:n>0?n:0,totalBombsExploded:u>0?u:0,noFlagWins:s==="success"&&f?1:0,fastestWin:s==="success"&&m>0?m:null,totalWinTime:s==="success"&&m>0?m:0,totalGameRestarts:o>0?o:0,lastUpdated:new Date().toISOString(),ttl:r};await I.send(new g.PutCommand({TableName:E,Item:C}));return}let b=S.Item,T=s==="success",A=s==="defeat",h=s==="abandoned",R=s==="restarted",w=b.fastestWin||null;T&&m>0?!w||m<w?w=m:w=b.fastestWin:w=b.fastestWin||null;let x=b.recentGames||[],P={status:s,time:m,date:new Date().toISOString(),usedFlags:n,cellsRevealed:c,bombsExploded:u};x.unshift(P),x=x.slice(0,5);let N=["gamesPlayed = if_not_exists(gamesPlayed, :zero) + :one","gamesWon = if_not_exists(gamesWon, :zero) + :win","gamesLost = if_not_exists(gamesLost, :zero) + :loss","gamesAbandoned = if_not_exists(gamesAbandoned, :zero) + :abandoned","gamesRestarted = if_not_exists(gamesRestarted, :zero) + :restarted","totalTimePlayed = if_not_exists(totalTimePlayed, :zero) + :timePlayed","totalCellsRevealed = if_not_exists(totalCellsRevealed, :zero) + :cellsRevealed","totalFlagsPlaced = if_not_exists(totalFlagsPlaced, :zero) + :usedFlags","totalBombsExploded = if_not_exists(totalBombsExploded, :zero) + :bombsExploded","noFlagWins = if_not_exists(noFlagWins, :zero) + :noFlagWin","totalWinTime = if_not_exists(totalWinTime, :zero) + :winTime","totalGameRestarts = if_not_exists(totalGameRestarts, :zero) + :gameRestarts","fastestWin = :fastestWin","userName = :userName","userImage = :userImage","lastUpdated = :now","ttl = :ttl","recentGames = :recentGames"];await I.send(new g.UpdateCommand({TableName:E,Key:{userId:y,timestamp:p},UpdateExpression:`SET ${N.join(", ")}`,ExpressionAttributeValues:{":one":1,":win":T?1:0,":loss":A?1:0,":abandoned":h?1:0,":restarted":R?1:0,":zero":0,":timePlayed":i>0?i:0,":cellsRevealed":c>0?c:0,":usedFlags":n>0?n:0,":bombsExploded":u>0?u:0,":noFlagWin":T&&f?1:0,":winTime":T&&m>0?m:0,":gameRestarts":o>0?o:0,":fastestWin":w,":userName":e,":userImage":d,":now":new Date().toISOString(),":ttl":r,":recentGames":x}}))}0&&(module.exports={handler});
