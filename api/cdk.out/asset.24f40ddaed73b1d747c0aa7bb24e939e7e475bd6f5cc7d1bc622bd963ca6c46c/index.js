"use strict";var C=Object.defineProperty;var O=Object.getOwnPropertyDescriptor;var D=Object.getOwnPropertyNames;var U=Object.prototype.hasOwnProperty;var J=(s,r)=>{for(var e in r)C(s,e,{get:r[e],enumerable:!0})},M=(s,r,e,d)=>{if(r&&typeof r=="object"||typeof r=="function")for(let n of D(r))!U.call(s,n)&&n!==e&&C(s,n,{get:()=>r[n],enumerable:!(d=O(r,n))||d.enumerable});return s};var B=s=>M(C({},"__esModule",{value:!0}),s);var L={};J(L,{handler:()=>W});module.exports=B(L);var R=require("@aws-sdk/client-dynamodb"),c=require("@aws-sdk/lib-dynamodb"),F=new R.DynamoDBClient({}),I=c.DynamoDBDocumentClient.from(F),b=process.env.TABLE_NAME,Q=process.env.STATUS_TIME_INDEX,u={"Content-Type":"application/json","Access-Control-Allow-Origin":"*","Access-Control-Allow-Methods":"GET, POST, OPTIONS","Access-Control-Allow-Headers":"Content-Type,Authorization"},W=async s=>{if(s.httpMethod==="OPTIONS")return{statusCode:200,headers:u,body:JSON.stringify({message:"CORS enabled"})};try{let r=s.path.toLowerCase();if(r.includes("/leaderboard")){if(r.includes("/context/")){let e=s.pathParameters?.userId;return e?await K(e):{statusCode:400,headers:u,body:JSON.stringify({message:"User ID is required"})}}return await q(s)}if(r.includes("/stats/")){let e=s.pathParameters?.userId;return e?await V(e):{statusCode:400,headers:u,body:JSON.stringify({message:"User ID is required"})}}if(r.includes("/bestgames/")){let e=s.pathParameters?.userId;if(!e)return{statusCode:400,headers:u,body:JSON.stringify({message:"User ID is required"})};let d=s.queryStringParameters?.limit?parseInt(s.queryStringParameters.limit):5;return await k(e,d)}if(r.includes("/games")){if(s.httpMethod==="GET")return await _(s);if(s.httpMethod==="POST")return await $(s)}return{statusCode:404,headers:u,body:JSON.stringify({message:"Endpoint not found"})}}catch(r){return console.error("Error:",r),{statusCode:500,headers:u,body:JSON.stringify({message:"Internal server error",error:r instanceof Error?r.message:String(r)})}}};async function $(s){if(!s.body)return{statusCode:400,headers:u,body:JSON.stringify({message:"Request body is required"})};let r=JSON.parse(s.body),{userId:e,status:d,time:n,successTime:S,winTime:l,userName:t,userImage:i,usedFlags:m,bombsExploded:g,noFlagWin:a,timePlayed:y}=r;if(!e||!d)return{statusCode:400,headers:u,body:JSON.stringify({message:"userId and status are required"})};let f=new Date().toISOString(),p=Number(n||S||l||0),N=Math.floor(Date.now()/1e3)+90*24*60*60,A=`USER#${e}`,T=`DATE#${f}`,P={userId:A,timestamp:T,rawUserId:e,status:d,time:p,date:f,ttl:N,userName:t||e,userImage:i||null,usedFlags:m!==void 0?m:null,bombsExploded:g!==void 0?g:null,noFlagWin:a!==void 0?a:null,timePlayed:y!==void 0?y:null};if(await I.send(new c.PutCommand({TableName:b,Item:P})),d==="success"&&p>0)try{let E="BEST",x=`BEST#${e}`,w=await I.send(new c.QueryCommand({TableName:b,KeyConditionExpression:"userId = :pk AND #ts = :sk",ExpressionAttributeValues:{":pk":E,":sk":x},ExpressionAttributeNames:{"#ts":"timestamp"}})),h=w.Items&&w.Items.length>0?w.Items[0]:null;if(!h||p<h.time){let o={userId:E,timestamp:x,rawUserId:e,time:p,date:f,ttl:Math.floor(Date.now()/1e3)+31536e3,userName:t||e,userImage:i||null,usedFlags:m!==void 0?m:null,noFlagWin:a!==void 0?a:null,timePlayed:y!==void 0?y:null};await I.send(new c.PutCommand({TableName:b,Item:o}))}}catch(E){console.error("Error checking/updating best time:",E)}return{statusCode:200,headers:u,body:JSON.stringify({message:"Game result stored successfully",item:P})}}async function _(s){let r=s.queryStringParameters?.userId,e=s.queryStringParameters?.status,d=s.queryStringParameters?.limit?parseInt(s.queryStringParameters.limit):100;try{if(r){let t=`USER#${r}`,i={TableName:b,KeyConditionExpression:"userId = :userId AND begins_with(#ts, :datePrefix)",ExpressionAttributeValues:{":userId":t,":datePrefix":"DATE#"},ExpressionAttributeNames:{"#ts":"timestamp"},ScanIndexForward:!1,Limit:e==="success"?void 0:d};e&&(i.FilterExpression="#st = :status",i.ExpressionAttributeValues[":status"]=e,i.ExpressionAttributeNames["#st"]="status"),console.log(`Querying games for user ${r} with status ${e||"any"}`);let m=await I.send(new c.QueryCommand(i));console.log(`Found ${m.Items?.length||0} games`);let g=(m.Items||[]).map(a=>({...a,userId:a.rawUserId||(a.userId.startsWith("USER#")?a.userId.substring(5):a.userId),displayTimestamp:a.timestamp.startsWith("DATE#")?a.timestamp.substring(5):a.timestamp}));return e==="success"&&(console.log("Sorting successful games by time (fastest first)"),g=g.sort((a,y)=>a.time-y.time).slice(0,d),console.log(`Returning ${g.length} fastest games`)),{statusCode:200,headers:u,body:JSON.stringify(g)}}let n={TableName:b,FilterExpression:"begins_with(#ts, :datePrefix)",ExpressionAttributeValues:{":datePrefix":"DATE#"},ExpressionAttributeNames:{"#ts":"timestamp"},Limit:d};e&&(n.FilterExpression+=" AND #st = :status",n.ExpressionAttributeValues[":status"]=e,n.ExpressionAttributeNames["#st"]="status");let l=((await I.send(new c.ScanCommand(n))).Items||[]).map(t=>({...t,userId:t.rawUserId||(t.userId.startsWith("USER#")?t.userId.substring(5):t.userId),displayTimestamp:t.timestamp.startsWith("DATE#")?t.timestamp.substring(5):t.timestamp}));return{statusCode:200,headers:u,body:JSON.stringify(l)}}catch(n){return console.error("Error fetching games:",n),{statusCode:500,headers:u,body:JSON.stringify({message:"Error fetching games",error:n instanceof Error?n.message:String(n)})}}}async function q(s){let r=s.queryStringParameters?.limit?parseInt(s.queryStringParameters.limit):10;try{let e={TableName:b,KeyConditionExpression:"userId = :best",ExpressionAttributeValues:{":best":"BEST"}},l=((await I.send(new c.QueryCommand(e))).Items||[]).sort((t,i)=>t.time-i.time).slice(0,r).map((t,i)=>{let m=t.rawUserId||(t.timestamp.startsWith("BEST#")?t.timestamp.substring(5):"");return{rank:i+1,userId:m,userName:t.userName||m,userImage:t.userImage||null,time:t.time,date:t.date}});return{statusCode:200,headers:u,body:JSON.stringify(l)}}catch(e){return console.error("Error fetching leaderboard:",e),{statusCode:500,headers:u,body:JSON.stringify({message:"Error fetching leaderboard",error:e instanceof Error?e.message:String(e)})}}}async function K(s){try{let e={TableName:b,KeyConditionExpression:"userId = :best",ExpressionAttributeValues:{":best":"BEST"}},l=((await I.send(new c.QueryCommand(e))).Items||[]).sort((a,y)=>a.time-y.time).map((a,y)=>{let f=a.rawUserId||(a.timestamp.startsWith("BEST#")?a.timestamp.substring(5):"");return{rank:y+1,userId:f,userName:a.userName||f,userImage:a.userImage||null,time:a.time,date:a.date}}),t=l.findIndex(a=>a.userId===s);if(t===-1)return{statusCode:200,headers:u,body:JSON.stringify([])};let i=Math.max(0,t-2),m=Math.min(l.length-1,t+2),g=l.slice(i,m+1);return{statusCode:200,headers:u,body:JSON.stringify(g)}}catch(e){return console.error("Error fetching user leaderboard context:",e),{statusCode:500,headers:u,body:JSON.stringify({message:"Error fetching user leaderboard context",error:e instanceof Error?e.message:String(e)})}}}async function V(s){let r=`USER#${s}`,e={TableName:b,KeyConditionExpression:"userId = :userId",ExpressionAttributeValues:{":userId":r}},n=(await I.send(new c.QueryCommand(e))).Items||[],S={TableName:b,KeyConditionExpression:"userId = :best AND #ts = :sk",ExpressionAttributeValues:{":best":"BEST",":sk":`BEST#${s}`},ExpressionAttributeNames:{"#ts":"timestamp"}},l=await I.send(new c.QueryCommand(S)),t=l.Items&&l.Items.length>0?l.Items[0]:null,i=0,m=0,g=0,a=t?t.time:Number.MAX_SAFE_INTEGER,y=0,f=0,p=t?.userName||s,N=t?.userImage||null,A=0,T=0,P=0,E=0,x=n.filter(o=>o.timestamp.startsWith("DATE#"));i=x.length,x.forEach(o=>{o.userName&&!p&&(p=o.userName),o.userImage&&!N&&(N=o.userImage),o.bombsExploded&&(A+=o.bombsExploded),o.status==="success"&&o.noFlagWin===!0&&T++,o.timePlayed&&typeof o.timePlayed=="number"&&(P+=o.timePlayed,E++),o.status==="success"?(m++,f+=o.time||0,t||(a=Math.min(a,o.time||Number.MAX_SAFE_INTEGER))):o.status==="defeat"&&g++}),y=m>0?Math.round(f/m):0;let w=E>0?Math.round(P/E):0;a===Number.MAX_SAFE_INTEGER&&(a=0);let h={userId:s,userName:p,userImage:N,totalGames:i,wins:m,losses:g,winRate:i>0?Math.round(m/i*100):0,fastestWin:a,averageWinTime:y,bombsExploded:A,noFlagWins:T,timePlayed:P,averageGameTime:w,recentGames:x.sort((o,G)=>G.timestamp.localeCompare(o.timestamp)).slice(0,5).map(o=>({...o,userId:o.rawUserId||s}))};return{statusCode:200,headers:u,body:JSON.stringify(h)}}async function k(s,r=5){console.log(`Getting top ${r} best games for user ${s}`);let e=`USER#${s}`,d={TableName:b,KeyConditionExpression:"userId = :userId AND begins_with(#ts, :datePrefix)",ExpressionAttributeValues:{":userId":e,":datePrefix":"DATE#",":status":"success"},ExpressionAttributeNames:{"#ts":"timestamp","#st":"status"},FilterExpression:"#st = :status"};try{let n=await I.send(new c.QueryCommand(d));console.log(`Found ${n.Items?.length||0} successful games for user ${s}`);let l=(n.Items||[]).map(t=>({...t,userId:t.rawUserId||(t.userId.startsWith("USER#")?t.userId.substring(5):t.userId),displayTimestamp:t.timestamp.startsWith("DATE#")?t.timestamp.substring(5):t.timestamp})).sort((t,i)=>t.time-i.time).slice(0,r);return console.log(`Returning ${l.length} best games`),{statusCode:200,headers:u,body:JSON.stringify(l)}}catch(n){return console.error(`Error fetching best games for user ${s}:`,n),{statusCode:500,headers:u,body:JSON.stringify({message:"Error fetching best games",error:n instanceof Error?n.message:String(n)})}}}0&&(module.exports={handler});
