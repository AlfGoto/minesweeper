"use strict";var C=Object.defineProperty;var O=Object.getOwnPropertyDescriptor;var R=Object.getOwnPropertyNames;var U=Object.prototype.hasOwnProperty;var J=(t,n)=>{for(var s in n)C(t,s,{get:n[s],enumerable:!0})},B=(t,n,s,l)=>{if(n&&typeof n=="object"||typeof n=="function")for(let i of R(n))!U.call(t,i)&&i!==s&&C(t,i,{get:()=>n[i],enumerable:!(l=O(n,i))||l.enumerable});return t};var W=t=>B(C({},"__esModule",{value:!0}),t);var L={};J(L,{handler:()=>F});module.exports=W(L);var G=require("@aws-sdk/client-dynamodb"),c=require("@aws-sdk/lib-dynamodb"),M=new G.DynamoDBClient({}),b=c.DynamoDBDocumentClient.from(M),p=process.env.TABLE_NAME,j=process.env.STATUS_TIME_INDEX,m={"Content-Type":"application/json","Access-Control-Allow-Origin":"*","Access-Control-Allow-Methods":"GET, POST, OPTIONS","Access-Control-Allow-Headers":"Content-Type,Authorization"},F=async t=>{if(t.httpMethod==="OPTIONS")return{statusCode:200,headers:m,body:JSON.stringify({message:"CORS enabled"})};try{let n=t.path.toLowerCase();if(n.includes("/leaderboard")){if(n.includes("/context/")){let s=t.pathParameters?.userId;return s?await V(s):{statusCode:400,headers:m,body:JSON.stringify({message:"User ID is required"})}}return await q(t)}if(n.includes("/stats/")){let s=t.pathParameters?.userId;return s?await k(s):{statusCode:400,headers:m,body:JSON.stringify({message:"User ID is required"})}}if(n.includes("/bestgames/")){let s=t.pathParameters?.userId;if(!s)return{statusCode:400,headers:m,body:JSON.stringify({message:"User ID is required"})};let l=t.queryStringParameters?.limit?parseInt(t.queryStringParameters.limit):5;return await $(s,l)}if(n.includes("/games")){if(t.httpMethod==="GET")return await _(t);if(t.httpMethod==="POST")return await K(t)}return{statusCode:404,headers:m,body:JSON.stringify({message:"Endpoint not found"})}}catch(n){return console.error("Error:",n),{statusCode:500,headers:m,body:JSON.stringify({message:"Internal server error",error:n instanceof Error?n.message:String(n)})}}};async function K(t){if(!t.body)return{statusCode:400,headers:m,body:JSON.stringify({message:"Request body is required"})};let n=JSON.parse(t.body),{userId:s,status:l,time:i,successTime:S,winTime:y,userName:a,userImage:u,usedFlags:e,bombsExploded:d,noFlagWin:r,timePlayed:I}=n;if(!s||!l)return{statusCode:400,headers:m,body:JSON.stringify({message:"userId and status are required"})};let f=new Date().toISOString(),E=Number(i||S||y||0),P=Math.floor(Date.now()/1e3)+90*24*60*60,N=`USER#${s}`,A=`DATE#${f}`,T={userId:N,timestamp:A,rawUserId:s,status:l,time:E,date:f,ttl:P,userName:a||s,userImage:u||null,usedFlags:e!==void 0?e:null,bombsExploded:d!==void 0?d:null,noFlagWin:r!==void 0?r:null,timePlayed:I!==void 0?I:null};if(await b.send(new c.PutCommand({TableName:p,Item:T})),l==="success"&&E>0)try{let g="BEST",w=`BEST#${s}`,x=await b.send(new c.QueryCommand({TableName:p,KeyConditionExpression:"userId = :pk AND #ts = :sk",ExpressionAttributeValues:{":pk":g,":sk":w},ExpressionAttributeNames:{"#ts":"timestamp"}})),h=x.Items&&x.Items.length>0?x.Items[0]:null;if(!h||E<h.time){let o={userId:g,timestamp:w,rawUserId:s,time:E,date:f,ttl:Math.floor(Date.now()/1e3)+31536e3,userName:a||s,userImage:u||null,usedFlags:e!==void 0?e:null,noFlagWin:r!==void 0?r:null,timePlayed:I!==void 0?I:null};await b.send(new c.PutCommand({TableName:p,Item:o}))}}catch(g){console.error("Error checking/updating best time:",g)}return{statusCode:200,headers:m,body:JSON.stringify({message:"Game result stored successfully",item:T})}}async function _(t){let n=t.queryStringParameters?.userId,s=t.queryStringParameters?.status,l=t.queryStringParameters?.limit?parseInt(t.queryStringParameters.limit):100;try{if(n){let a=`USER#${n}`,u={TableName:p,KeyConditionExpression:"userId = :userId AND begins_with(#ts, :datePrefix)",ExpressionAttributeValues:{":userId":a,":datePrefix":"DATE#"},ExpressionAttributeNames:{"#ts":"timestamp"},ScanIndexForward:!1,Limit:s==="success"?void 0:l};s&&(u.FilterExpression="#st = :status",u.ExpressionAttributeValues[":status"]=s,u.ExpressionAttributeNames["#st"]="status");let d=((await b.send(new c.QueryCommand(u))).Items||[]).map(r=>({...r,userId:r.rawUserId||(r.userId.startsWith("USER#")?r.userId.substring(5):r.userId),displayTimestamp:r.timestamp.startsWith("DATE#")?r.timestamp.substring(5):r.timestamp}));return s==="success"&&(d=d.sort((r,I)=>r.time-I.time).slice(0,l)),{statusCode:200,headers:m,body:JSON.stringify(d)}}let i={TableName:p,FilterExpression:"begins_with(#ts, :datePrefix)",ExpressionAttributeValues:{":datePrefix":"DATE#"},ExpressionAttributeNames:{"#ts":"timestamp"},Limit:l};s&&(i.FilterExpression+=" AND #st = :status",i.ExpressionAttributeValues[":status"]=s,i.ExpressionAttributeNames["#st"]="status");let y=((await b.send(new c.ScanCommand(i))).Items||[]).map(a=>({...a,userId:a.rawUserId||(a.userId.startsWith("USER#")?a.userId.substring(5):a.userId),displayTimestamp:a.timestamp.startsWith("DATE#")?a.timestamp.substring(5):a.timestamp}));return{statusCode:200,headers:m,body:JSON.stringify(y)}}catch(i){return console.error("Error fetching games:",i),{statusCode:500,headers:m,body:JSON.stringify({message:"Error fetching games",error:i instanceof Error?i.message:String(i)})}}}async function q(t){let n=t.queryStringParameters?.limit?parseInt(t.queryStringParameters.limit):10;try{let s={TableName:p,KeyConditionExpression:"userId = :best",ExpressionAttributeValues:{":best":"BEST"}},y=((await b.send(new c.QueryCommand(s))).Items||[]).sort((a,u)=>a.time-u.time).slice(0,n).map((a,u)=>{let e=a.rawUserId||(a.timestamp.startsWith("BEST#")?a.timestamp.substring(5):"");return{rank:u+1,userId:e,userName:a.userName||e,userImage:a.userImage||null,time:a.time,date:a.date}});return{statusCode:200,headers:m,body:JSON.stringify(y)}}catch(s){return console.error("Error fetching leaderboard:",s),{statusCode:500,headers:m,body:JSON.stringify({message:"Error fetching leaderboard",error:s instanceof Error?s.message:String(s)})}}}async function V(t){try{let s={TableName:p,KeyConditionExpression:"userId = :best",ExpressionAttributeValues:{":best":"BEST"}},y=((await b.send(new c.QueryCommand(s))).Items||[]).sort((r,I)=>r.time-I.time).map((r,I)=>{let f=r.rawUserId||(r.timestamp.startsWith("BEST#")?r.timestamp.substring(5):"");return{rank:I+1,userId:f,userName:r.userName||f,userImage:r.userImage||null,time:r.time,date:r.date}}),a=y.findIndex(r=>r.userId===t);if(a===-1)return{statusCode:200,headers:m,body:JSON.stringify([])};let u=Math.max(0,a-2),e=Math.min(y.length-1,a+2),d=y.slice(u,e+1);return{statusCode:200,headers:m,body:JSON.stringify(d)}}catch(s){return console.error("Error fetching user leaderboard context:",s),{statusCode:500,headers:m,body:JSON.stringify({message:"Error fetching user leaderboard context",error:s instanceof Error?s.message:String(s)})}}}async function k(t){let n=`USER#${t}`,s={TableName:p,KeyConditionExpression:"userId = :userId",ExpressionAttributeValues:{":userId":n}},i=(await b.send(new c.QueryCommand(s))).Items||[],S={TableName:p,KeyConditionExpression:"userId = :best AND #ts = :sk",ExpressionAttributeValues:{":best":"BEST",":sk":`BEST#${t}`},ExpressionAttributeNames:{"#ts":"timestamp"}},y=await b.send(new c.QueryCommand(S)),a=y.Items&&y.Items.length>0?y.Items[0]:null,u=0,e=0,d=0,r=a?a.time:Number.MAX_SAFE_INTEGER,I=0,f=0,E=a?.userName||t,P=a?.userImage||null,N=0,A=0,T=0,g=0,w=i.filter(o=>o.timestamp.startsWith("DATE#"));u=w.length,w.forEach(o=>{o.userName&&!E&&(E=o.userName),o.userImage&&!P&&(P=o.userImage),o.bombsExploded&&(N+=o.bombsExploded),o.status==="success"&&o.noFlagWin===!0&&A++,o.timePlayed&&typeof o.timePlayed=="number"&&(T+=o.timePlayed,g++),o.status==="success"?(e++,f+=o.time||0,a||(r=Math.min(r,o.time||Number.MAX_SAFE_INTEGER))):o.status==="defeat"&&d++}),I=e>0?Math.round(f/e):0;let x=g>0?Math.round(T/g):0;r===Number.MAX_SAFE_INTEGER&&(r=0);let h={userId:t,userName:E,userImage:P,totalGames:u,wins:e,losses:d,winRate:u>0?Math.round(e/u*100):0,fastestWin:r,averageWinTime:I,bombsExploded:N,noFlagWins:A,timePlayed:T,averageGameTime:x,recentGames:w.sort((o,D)=>D.timestamp.localeCompare(o.timestamp)).slice(0,5).map(o=>({...o,userId:o.rawUserId||t}))};return{statusCode:200,headers:m,body:JSON.stringify(h)}}async function $(t,n=5){let s=`USER#${t}`,l={TableName:p,KeyConditionExpression:"userId = :userId AND begins_with(#ts, :datePrefix)",ExpressionAttributeValues:{":userId":s,":datePrefix":"DATE#"},ExpressionAttributeNames:{"#ts":"timestamp"}};try{let u=((await b.send(new c.QueryCommand(l))).Items||[]).map(e=>({...e,userId:e.rawUserId||(e.userId.startsWith("USER#")?e.userId.substring(5):e.userId),date:e.date||(e.timestamp.startsWith("DATE#")?e.timestamp.substring(5):e.timestamp),displayTimestamp:e.timestamp.startsWith("DATE#")?e.timestamp.substring(5):e.timestamp})).filter(e=>{let d=e.time&&e.time>0||e.successTime&&e.successTime>0||e.winTime&&e.winTime>0;return(e.status==="success"||e.gameWon===!0)&&d}).map(e=>({...e,time:e.time||e.successTime||e.winTime||0,date:e.date||new Date(e.displayTimestamp).toISOString()})).sort((e,d)=>e.time-d.time).slice(0,n);if(u.length===0){let e={TableName:p,KeyConditionExpression:"userId = :best AND #ts = :sk",ExpressionAttributeValues:{":best":"BEST",":sk":`BEST#${t}`},ExpressionAttributeNames:{"#ts":"timestamp"}},d=await b.send(new c.QueryCommand(e)),r=d.Items&&d.Items.length>0?d.Items[0]:null;r&&r.time>0&&u.push({...r,userId:r.rawUserId||t,status:"success",date:r.date||new Date().toISOString()})}return{statusCode:200,headers:m,body:JSON.stringify(u)}}catch(i){return console.error(`Error fetching best games for user ${t}:`,i),{statusCode:500,headers:m,body:JSON.stringify({message:"Error fetching best games",error:i instanceof Error?i.message:String(i)})}}}0&&(module.exports={handler});
