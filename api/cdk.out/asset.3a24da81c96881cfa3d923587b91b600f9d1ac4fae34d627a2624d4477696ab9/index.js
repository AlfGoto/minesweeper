"use strict";var K=Object.defineProperty;var L=Object.getOwnPropertyDescriptor;var k=Object.getOwnPropertyNames;var V=Object.prototype.hasOwnProperty;var _=(s,t)=>{for(var e in t)K(s,e,{get:t[e],enumerable:!0})},z=(s,t,e,u)=>{if(t&&typeof t=="object"||typeof t=="function")for(let r of k(t))!V.call(s,r)&&r!==e&&K(s,r,{get:()=>t[r],enumerable:!(u=L(t,r))||u.enumerable});return s};var X=s=>z(K({},"__esModule",{value:!0}),s);var ae={};_(ae,{handler:()=>H});module.exports=X(ae);var $=require("@aws-sdk/client-dynamodb"),y=require("@aws-sdk/lib-dynamodb"),j=new $.DynamoDBClient({}),x=y.DynamoDBDocumentClient.from(j),h=process.env.TABLE_NAME,me=process.env.STATUS_TIME_INDEX,g={"Content-Type":"application/json","Access-Control-Allow-Origin":"*","Access-Control-Allow-Methods":"GET, POST, OPTIONS","Access-Control-Allow-Headers":"Content-Type,Authorization"},H=async s=>{if(s.httpMethod==="OPTIONS")return{statusCode:200,headers:g,body:JSON.stringify({message:"CORS enabled"})};try{let t=s.path.toLowerCase();if(t.includes("/leaderboard")){if(t.includes("/context/")){let e=s.pathParameters?.userId;return e?await ee(e):{statusCode:400,headers:g,body:JSON.stringify({message:"User ID is required"})}}return await Z(s)}if(t.includes("/stats/")){let e=s.pathParameters?.userId;return e?await se(e):{statusCode:400,headers:g,body:JSON.stringify({message:"User ID is required"})}}if(t.includes("/bestgames/")){let e=s.pathParameters?.userId;if(!e)return{statusCode:400,headers:g,body:JSON.stringify({message:"User ID is required"})};let u=s.queryStringParameters?.limit?parseInt(s.queryStringParameters.limit):5;return await te(e,u)}if(t.includes("/games")){if(s.httpMethod==="GET")return await Y(s);if(s.httpMethod==="POST")return await Q(s)}return{statusCode:404,headers:g,body:JSON.stringify({message:"Endpoint not found"})}}catch(t){return console.error("Error:",t),{statusCode:500,headers:g,body:JSON.stringify({message:"Internal server error",error:t instanceof Error?t.message:String(t)})}}};async function Q(s){if(!s.body)return{statusCode:400,headers:g,body:JSON.stringify({message:"Request body is required"})};let t=JSON.parse(s.body),{userId:e,status:u,time:r,successTime:l,winTime:E,userName:n,userImage:b,usedFlags:w,bombsExploded:T,noFlagWin:o,timePlayed:i,cellsRevealed:p,gameRestarts:P}=t;if(!e||!u)return{statusCode:400,headers:g,body:JSON.stringify({message:"userId and status are required"})};let a=new Date().toISOString(),S=Number(r||l||E||0),O=Math.floor(Date.now()/1e3)+7*24*60*60,D=`USER#${e}`,J=`DATE#${a}`;console.log("Saving game with data:",{userId:e,status:u,gameTime:S,timePlayed:i,usedFlags:w,bombsExploded:T,noFlagWin:o,cellsRevealed:p,gameRestarts:P});let C={userId:D,timestamp:J,rawUserId:e,status:u,time:S,date:a,ttl:O,userName:n||e,userImage:b||null,usedFlags:typeof w=="number"?w:0,bombsExploded:typeof T=="number"?T:0,noFlagWin:o===!0,timePlayed:typeof i=="number"?i:S,cellsRevealed:typeof p=="number"?p:0,gameRestarts:typeof P=="number"?P:0};await x.send(new y.PutCommand({TableName:h,Item:C}));try{let f=await F(e,100),N=f.reduce((d,I)=>{let M=I.status;return d[M]=(d[M]||0)+1,d},{}),A=f.reduce((d,I)=>d+(typeof I.timePlayed=="number"?I.timePlayed:0),0),R=f.reduce((d,I)=>d+(typeof I.cellsRevealed=="number"?I.cellsRevealed:0),0),G=f.reduce((d,I)=>d+(typeof I.usedFlags=="number"?I.usedFlags:0),0),U=f.reduce((d,I)=>d+(typeof I.bombsExploded=="number"?I.bombsExploded:0),0),B=f.reduce((d,I)=>d+(typeof I.gameRestarts=="number"?I.gameRestarts:0),0),m=f.filter(d=>d.status==="success"&&d.noFlagWin===!0).length,c=f.filter(d=>d.status==="success"&&typeof d.time=="number"&&d.time>0),W=c.length>0?Math.min(...c.map(d=>d.time)):null,q=c.reduce((d,I)=>d+(I.time||0),0),v={userId:e,userName:n||e,userImage:b||null,status:u,timePlayed:A,cellsRevealed:R,usedFlags:G,bombsExploded:U,noFlagWin:m>0,gameTime:W||0,gameRestarts:B,totalGames:f.length,gamesWon:N.success||0,gamesLost:N.defeat||0,gamesAbandoned:N.abandoned||0,gamesRestarted:N.restarted||0,totalWinTime:q};console.log("Updating stats with params:",v),await re(v)}catch(f){console.error("Error updating user stats:",f)}if(u==="success"&&S>0)try{let f="BEST",N=`BEST#${e}`,A=await x.send(new y.QueryCommand({TableName:h,KeyConditionExpression:"userId = :pk AND #ts = :sk",ExpressionAttributeValues:{":pk":f,":sk":N},ExpressionAttributeNames:{"#ts":"timestamp"}})),R=A.Items&&A.Items.length>0?A.Items[0]:null;if(!R||S<R.time){let G={userId:f,timestamp:N,rawUserId:e,time:S,date:a,userName:n||e,userImage:b||null,usedFlags:typeof w=="number"?w:0,noFlagWin:o===!0,timePlayed:typeof i=="number"?i:S,cellsRevealed:typeof p=="number"?p:0,gameRestarts:typeof P=="number"?P:0};await x.send(new y.PutCommand({TableName:h,Item:G}))}}catch(f){console.error("Error checking/updating best time:",f)}return{statusCode:200,headers:g,body:JSON.stringify({message:"Game saved successfully"})}}async function Y(s){let t=s.queryStringParameters?.userId,e=s.queryStringParameters?.status,u=s.queryStringParameters?.limit?parseInt(s.queryStringParameters.limit):100;try{if(t){let n=`USER#${t}`,b={TableName:h,KeyConditionExpression:"userId = :userId AND begins_with(#ts, :datePrefix)",ExpressionAttributeValues:{":userId":n,":datePrefix":"DATE#"},ExpressionAttributeNames:{"#ts":"timestamp"},ScanIndexForward:!1,Limit:e==="success"?void 0:u};e&&(b.FilterExpression="#st = :status",b.ExpressionAttributeValues[":status"]=e,b.ExpressionAttributeNames["#st"]="status");let T=((await x.send(new y.QueryCommand(b))).Items||[]).map(o=>({...o,userId:o.rawUserId||(o.userId?.startsWith("USER#")?o.userId.substring(5):o.userId||t),displayTimestamp:o.timestamp?.startsWith("DATE#")?o.timestamp.substring(5):o.timestamp}));return e==="success"&&(T=T.sort((o,i)=>(o.displayTimestamp||0)-(i.displayTimestamp||0)).slice(0,u)),{statusCode:200,headers:g,body:JSON.stringify(T)}}let r={TableName:h,FilterExpression:"begins_with(#ts, :datePrefix)",ExpressionAttributeValues:{":datePrefix":"DATE#"},ExpressionAttributeNames:{"#ts":"timestamp"},Limit:u};e&&(r.FilterExpression+=" AND #st = :status",r.ExpressionAttributeValues[":status"]=e,r.ExpressionAttributeNames["#st"]="status");let E=((await x.send(new y.ScanCommand(r))).Items||[]).map(n=>({...n,userId:n.rawUserId||(n.userId?.startsWith("USER#")?n.userId.substring(5):n.userId),displayTimestamp:n.timestamp?.startsWith("DATE#")?n.timestamp.substring(5):n.timestamp}));return{statusCode:200,headers:g,body:JSON.stringify(E)}}catch(r){return console.error("Error fetching games:",r),{statusCode:500,headers:g,body:JSON.stringify({message:"Error fetching games",error:r instanceof Error?r.message:String(r)})}}}async function Z(s){let t=s.queryStringParameters?.limit?parseInt(s.queryStringParameters.limit):10;try{let e={TableName:h,KeyConditionExpression:"userId = :best",ExpressionAttributeValues:{":best":"BEST"}},E=((await x.send(new y.QueryCommand(e))).Items||[]).sort((n,b)=>n.time-b.time).slice(0,t).map((n,b)=>{let w=n.rawUserId||(n.timestamp.startsWith("BEST#")?n.timestamp.substring(5):"");return{rank:b+1,userId:w,userName:n.userName||w,userImage:n.userImage||null,time:n.time,date:n.date}});return{statusCode:200,headers:g,body:JSON.stringify(E)}}catch(e){return console.error("Error fetching leaderboard:",e),{statusCode:500,headers:g,body:JSON.stringify({message:"Error fetching leaderboard",error:e instanceof Error?e.message:String(e)})}}}async function ee(s){try{let e={TableName:h,KeyConditionExpression:"userId = :best",ExpressionAttributeValues:{":best":"BEST"}},E=((await x.send(new y.QueryCommand(e))).Items||[]).sort((o,i)=>o.time-i.time).map((o,i)=>{let p=o.rawUserId||(o.timestamp.startsWith("BEST#")?o.timestamp.substring(5):"");return{rank:i+1,userId:p,userName:o.userName||p,userImage:o.userImage||null,time:o.time,date:o.date}}),n=E.findIndex(o=>o.userId===s);if(n===-1)return{statusCode:200,headers:g,body:JSON.stringify([])};let b=Math.max(0,n-2),w=Math.min(E.length-1,n+2),T=E.slice(b,w+1);return{statusCode:200,headers:g,body:JSON.stringify(T)}}catch(e){return console.error("Error fetching user leaderboard context:",e),{statusCode:500,headers:g,body:JSON.stringify({message:"Error fetching user leaderboard context",error:e instanceof Error?e.message:String(e)})}}}async function se(s){try{let t=`STAT#${s}`,e="STAT",u=await x.send(new y.GetCommand({TableName:h,Key:{userId:t,timestamp:e}}));if(u.Item){let r=u.Item;console.log("Retrieved raw stats:",r);let l=r.gamesPlayed||0,E=r.gamesWon||0,n=r.gamesLost||0,b=r.totalWinTime||0,w=r.totalTimePlayed||0,T=E>0?Math.round(b/E):0,o=l>0?Math.round(w/l):0,i=l>0?Math.round(E/l*100):0,p=Array.isArray(r.recentGames)?r.recentGames:await F(s,5),P={userId:r.rawUserId||s,userName:r.userName||s,userImage:r.userImage||null,totalGames:l,wins:E,losses:n,winRate:i,fastestWin:r.fastestWin||null,averageWinTime:T,averageGameTime:o,bombsExploded:r.totalBombsExploded||0,noFlagWins:r.noFlagWins||0,timePlayed:w,totalCellsRevealed:r.totalCellsRevealed||0,gameRestarts:r.totalGameRestarts||0,abandonedGames:r.gamesAbandoned||0,restartedGames:r.gamesRestarted||0,totalFlagsUsed:r.totalFlagsPlaced||0,recentGames:p};return console.log("Transformed stats:",P),{statusCode:200,headers:g,body:JSON.stringify(P)}}return console.log("No stats found for user:",s),{statusCode:200,headers:g,body:JSON.stringify({userId:s,userName:s,userImage:null,totalGames:0,wins:0,losses:0,winRate:0,bombsExploded:0,noFlagWins:0,timePlayed:0,averageGameTime:0,totalCellsRevealed:0,gameRestarts:0,abandonedGames:0,restartedGames:0,totalFlagsUsed:0,averageWinTime:0,fastestWin:null,recentGames:await F(s,5)})}}catch(t){return console.error(`Error in getUserStats for ${s}:`,t),{statusCode:500,headers:g,body:JSON.stringify({message:"Error fetching user stats",error:t instanceof Error?t.message:String(t)})}}}async function F(s,t){try{let e=`USER#${s}`,u={TableName:h,KeyConditionExpression:"userId = :userId AND begins_with(#ts, :datePrefix)",ExpressionAttributeValues:{":userId":e,":datePrefix":"DATE#"},ExpressionAttributeNames:{"#ts":"timestamp"},ScanIndexForward:!1,...t?{Limit:t}:{}};return((await x.send(new y.QueryCommand(u))).Items||[]).map(l=>({...l,userId:l.rawUserId||(l.userId.startsWith("USER#")?l.userId.substring(5):l.userId)}))}catch(e){return console.error(`Error fetching recent games for user ${s}:`,e),[]}}async function te(s,t=5){try{let e=[],u={TableName:h,KeyConditionExpression:"userId = :best AND #ts = :sk",ExpressionAttributeValues:{":best":"BEST",":sk":`BEST#${s}`},ExpressionAttributeNames:{"#ts":"timestamp"}},r=await x.send(new y.QueryCommand(u)),l=r.Items&&r.Items.length>0?r.Items[0]:null;l&&l.time>0&&e.push({...l,userId:l.rawUserId||s,status:"success",date:l.date||new Date().toISOString()});let E=`USER#${s}`,n={TableName:h,KeyConditionExpression:"userId = :userId AND begins_with(#ts, :datePrefix)",ExpressionAttributeValues:{":userId":E,":datePrefix":"DATE#"},ExpressionAttributeNames:{"#ts":"timestamp"}},o=((await x.send(new y.QueryCommand(n))).Items||[]).map(a=>({...a,userId:a.rawUserId||(a.userId.startsWith("USER#")?a.userId.substring(5):a.userId),date:a.date||(a.timestamp.startsWith("DATE#")?a.timestamp.substring(5):a.timestamp),displayTimestamp:a.timestamp.startsWith("DATE#")?a.timestamp.substring(5):a.timestamp})).filter(a=>{let S=a.time&&a.time>0||a.successTime&&a.successTime>0||a.winTime&&a.winTime>0;return a.status==="success"&&S}).map(a=>({...a,time:a.time||a.successTime||a.winTime||0,date:a.date||new Date(a.displayTimestamp).toISOString()}));e.push(...o);let i=[],p=new Set;for(let a of e){let S=`${a.time}-${a.date}`;p.has(S)||(p.add(S),i.push(a))}let P=i.sort((a,S)=>a.time-S.time).slice(0,t);return console.log(`Found ${P.length} best games for user ${s}`),{statusCode:200,headers:g,body:JSON.stringify(P)}}catch(e){return console.error(`Error fetching best games for user ${s}:`,e),{statusCode:500,headers:g,body:JSON.stringify({message:"Error fetching best games",error:e instanceof Error?e.message:String(e)})}}}async function re(s){let{userId:t,userName:e,userImage:u,status:r,timePlayed:l,cellsRevealed:E,usedFlags:n,bombsExploded:b,noFlagWin:w,gameTime:T,gameRestarts:o}=s;console.log("Starting updateUserStats with params:",s);let i=await F(t,void 0),p=i.reduce((m,c)=>{let W=c.status;return m[W]=(m[W]||0)+1,m},{}),P=i.reduce((m,c)=>m+(typeof c.timePlayed=="number"?c.timePlayed:0),0),a=i.reduce((m,c)=>m+(typeof c.cellsRevealed=="number"?c.cellsRevealed:0),0),S=i.reduce((m,c)=>m+(typeof c.usedFlags=="number"?c.usedFlags:0),0),O=i.reduce((m,c)=>m+(typeof c.bombsExploded=="number"?c.bombsExploded:0),0),D=i.reduce((m,c)=>m+(typeof c.gameRestarts=="number"?c.gameRestarts:0),0),J=i.filter(m=>m.status==="success"&&m.noFlagWin===!0).length,C=i.filter(m=>m.status==="success"&&typeof m.time=="number"&&m.time>0),f=C.length>0?Math.min(...C.map(m=>m.time)):null,N=C.reduce((m,c)=>m+(c.time||0),0),A=`STAT#${t}`,R="STAT",G=Math.floor(Date.now()/1e3)+365*24*60*60,U={userId:A,timestamp:R,rawUserId:t,userName:e||t,userImage:u||null,gamesPlayed:i.length,gamesWon:p.success||0,gamesLost:p.defeat||0,gamesAbandoned:p.abandoned||0,gamesRestarted:p.restarted||0,totalTimePlayed:P,totalCellsRevealed:a,totalFlagsPlaced:S,totalBombsExploded:O,totalGameRestarts:D,noFlagWins:J,totalWinTime:N,fastestWin:f,lastUpdated:new Date().toISOString(),ttl:G};console.log("Updating stats with:",U),await x.send(new y.PutCommand({TableName:h,Item:U}));let B=await x.send(new y.GetCommand({TableName:h,Key:{userId:A,timestamp:R}}));console.log("Updated stats:",B.Item)}0&&(module.exports={handler});
